// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.2
// source: google/maps/routes/v1/toll_passes.proto

package routes

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of toll passes around the world that we support.
type TollPass int32

const (
	// Not used. If this value is used, then the request fails.
	TollPass_TOLL_PASS_UNSPECIFIED TollPass = 0
	// Australia-wide toll pass.
	// See additional details at https://www.linkt.com.au/.
	TollPass_AU_LINKT TollPass = 2
	// Argentina toll pass. See additional details at https://telepase.com.ar
	TollPass_AR_TELEPASE TollPass = 3
	// Brazil toll pass. See additional details at https://conectcar.com.
	TollPass_BR_CONECTCAR TollPass = 7
	// Brazil toll pass. See additional details at https://movemais.com.
	TollPass_BR_MOVE_MAIS TollPass = 8
	// Brazil toll pass. See additional details at https://www.semparar.com.br.
	TollPass_BR_SEM_PARAR TollPass = 9
	// Brazil toll pass. See additional details at https://taggy.com.br.
	TollPass_BR_TAGGY TollPass = 10
	// Brazil toll pass. See additional details at
	// https://veloe.com.br/site/onde-usar.
	TollPass_BR_VELOE TollPass = 11
	// Indonesia.
	// E-card provided by multiple banks used to pay for tolls. All e-cards
	// via banks are charged the same so only one enum value is needed. E.g.
	// Bank Mandiri https://www.bankmandiri.co.id/e-money
	// BCA https://www.bca.co.id/flazz
	// BNI https://www.bni.co.id/id-id/ebanking/tapcash
	TollPass_ID_E_TOLL TollPass = 16
	// Mexico toll pass.
	TollPass_MX_TAG_IAVE TollPass = 12
	// Mexico toll pass company. One of many operating in Mexico City. See
	// additional details at https://www.televia.com.mx.
	TollPass_MX_TAG_TELEVIA TollPass = 13
	// Mexico toll pass. See additional details at
	// https://www.viapass.com.mx/viapass/web_home.aspx.
	TollPass_MX_VIAPASS TollPass = 14
	// State pass of California, United States. Passes vary between Standard,
	// Flex, and Clean Air. Flex and Clean Air have settings for carpool. See
	// additional details at https://www.bayareafastrak.org/en/home/index.shtml.
	TollPass_US_CA_FASTRAK TollPass = 4
	// State pass of Illinois, United States. See additional details at
	// https://www.illinoistollway.com/about-ipass.
	TollPass_US_IL_IPASS TollPass = 5
	// State pass of Massachusetts, United States. See additional details at
	// https://www.mass.gov/ezdrivema.
	TollPass_US_MA_EZPASSMA TollPass = 6
	// State pass of New York, United States. See additional details at
	// https://www.e-zpassny.com.
	TollPass_US_NY_EZPASSNY TollPass = 15
	// State pass of the Washington state, United States.
	TollPass_US_WA_GOOD_TO_GO TollPass = 1
)

// Enum value maps for TollPass.
var (
	TollPass_name = map[int32]string{
		0:  "TOLL_PASS_UNSPECIFIED",
		2:  "AU_LINKT",
		3:  "AR_TELEPASE",
		7:  "BR_CONECTCAR",
		8:  "BR_MOVE_MAIS",
		9:  "BR_SEM_PARAR",
		10: "BR_TAGGY",
		11: "BR_VELOE",
		16: "ID_E_TOLL",
		12: "MX_TAG_IAVE",
		13: "MX_TAG_TELEVIA",
		14: "MX_VIAPASS",
		4:  "US_CA_FASTRAK",
		5:  "US_IL_IPASS",
		6:  "US_MA_EZPASSMA",
		15: "US_NY_EZPASSNY",
		1:  "US_WA_GOOD_TO_GO",
	}
	TollPass_value = map[string]int32{
		"TOLL_PASS_UNSPECIFIED": 0,
		"AU_LINKT":              2,
		"AR_TELEPASE":           3,
		"BR_CONECTCAR":          7,
		"BR_MOVE_MAIS":          8,
		"BR_SEM_PARAR":          9,
		"BR_TAGGY":              10,
		"BR_VELOE":              11,
		"ID_E_TOLL":             16,
		"MX_TAG_IAVE":           12,
		"MX_TAG_TELEVIA":        13,
		"MX_VIAPASS":            14,
		"US_CA_FASTRAK":         4,
		"US_IL_IPASS":           5,
		"US_MA_EZPASSMA":        6,
		"US_NY_EZPASSNY":        15,
		"US_WA_GOOD_TO_GO":      1,
	}
)

func (x TollPass) Enum() *TollPass {
	p := new(TollPass)
	*p = x
	return p
}

func (x TollPass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TollPass) Descriptor() protoreflect.EnumDescriptor {
	return file_google_maps_routes_v1_toll_passes_proto_enumTypes[0].Descriptor()
}

func (TollPass) Type() protoreflect.EnumType {
	return &file_google_maps_routes_v1_toll_passes_proto_enumTypes[0]
}

func (x TollPass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TollPass.Descriptor instead.
func (TollPass) EnumDescriptor() ([]byte, []int) {
	return file_google_maps_routes_v1_toll_passes_proto_rawDescGZIP(), []int{0}
}

var File_google_maps_routes_v1_toll_passes_proto protoreflect.FileDescriptor

var file_google_maps_routes_v1_toll_passes_proto_rawDesc = []byte{
	0x0a, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2a, 0xbc, 0x02, 0x0a, 0x08, 0x54, 0x6f, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x4f, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x55, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x50, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x45, 0x43, 0x54, 0x43, 0x41, 0x52, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x53, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x52, 0x5f, 0x53, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x52, 0x10, 0x09, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x59, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x52, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x45, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x44, 0x5f,
	0x45, 0x5f, 0x54, 0x4f, 0x4c, 0x4c, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x58, 0x5f, 0x54,
	0x41, 0x47, 0x5f, 0x49, 0x41, 0x56, 0x45, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x58, 0x5f,
	0x54, 0x41, 0x47, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x56, 0x49, 0x41, 0x10, 0x0d, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x58, 0x5f, 0x56, 0x49, 0x41, 0x50, 0x41, 0x53, 0x53, 0x10, 0x0e, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x52, 0x41, 0x4b, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x5f, 0x49, 0x4c, 0x5f, 0x49, 0x50, 0x41, 0x53, 0x53, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x5f, 0x45, 0x5a, 0x50, 0x41, 0x53,
	0x53, 0x4d, 0x41, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x5f, 0x4e, 0x59, 0x5f, 0x45,
	0x5a, 0x50, 0x41, 0x53, 0x53, 0x4e, 0x59, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x5f,
	0x57, 0x41, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x4f, 0x10, 0x01, 0x42,
	0xa5, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x54,
	0x6f, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0xf8, 0x01, 0x01,
	0xa2, 0x02, 0x04, 0x47, 0x4d, 0x52, 0x53, 0xaa, 0x02, 0x15, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x15, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x4d, 0x61, 0x70, 0x73, 0x5c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_maps_routes_v1_toll_passes_proto_rawDescOnce sync.Once
	file_google_maps_routes_v1_toll_passes_proto_rawDescData = file_google_maps_routes_v1_toll_passes_proto_rawDesc
)

func file_google_maps_routes_v1_toll_passes_proto_rawDescGZIP() []byte {
	file_google_maps_routes_v1_toll_passes_proto_rawDescOnce.Do(func() {
		file_google_maps_routes_v1_toll_passes_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_maps_routes_v1_toll_passes_proto_rawDescData)
	})
	return file_google_maps_routes_v1_toll_passes_proto_rawDescData
}

var file_google_maps_routes_v1_toll_passes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_maps_routes_v1_toll_passes_proto_goTypes = []interface{}{
	(TollPass)(0), // 0: google.maps.routes.v1.TollPass
}
var file_google_maps_routes_v1_toll_passes_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_maps_routes_v1_toll_passes_proto_init() }
func file_google_maps_routes_v1_toll_passes_proto_init() {
	if File_google_maps_routes_v1_toll_passes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_maps_routes_v1_toll_passes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_maps_routes_v1_toll_passes_proto_goTypes,
		DependencyIndexes: file_google_maps_routes_v1_toll_passes_proto_depIdxs,
		EnumInfos:         file_google_maps_routes_v1_toll_passes_proto_enumTypes,
	}.Build()
	File_google_maps_routes_v1_toll_passes_proto = out.File
	file_google_maps_routes_v1_toll_passes_proto_rawDesc = nil
	file_google_maps_routes_v1_toll_passes_proto_goTypes = nil
	file_google_maps_routes_v1_toll_passes_proto_depIdxs = nil
}
