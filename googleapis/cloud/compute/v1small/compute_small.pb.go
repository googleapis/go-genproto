// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the disco-to-proto3-converter. DO NOT EDIT!
// Source Discovery file: compute.v1small.json
// Source file revision: 20200302
// API name: compute
// API version: v1small

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: google/cloud/compute/v1small/compute_small.proto

package compute

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/cloud/extendedops"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
type Address_AddressType int32

const (
	// A value indicating that the enum field is not set.
	Address_UNDEFINED_ADDRESS_TYPE Address_AddressType = 0
	Address_EXTERNAL               Address_AddressType = 35607499
	Address_INTERNAL               Address_AddressType = 279295677
	Address_UNSPECIFIED_TYPE       Address_AddressType = 53933922
)

// Enum value maps for Address_AddressType.
var (
	Address_AddressType_name = map[int32]string{
		0:         "UNDEFINED_ADDRESS_TYPE",
		35607499:  "EXTERNAL",
		279295677: "INTERNAL",
		53933922:  "UNSPECIFIED_TYPE",
	}
	Address_AddressType_value = map[string]int32{
		"UNDEFINED_ADDRESS_TYPE": 0,
		"EXTERNAL":               35607499,
		"INTERNAL":               279295677,
		"UNSPECIFIED_TYPE":       53933922,
	}
)

func (x Address_AddressType) Enum() *Address_AddressType {
	p := new(Address_AddressType)
	*p = x
	return p
}

func (x Address_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[0].Descriptor()
}

func (Address_AddressType) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[0]
}

func (x Address_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address_AddressType.Descriptor instead.
func (Address_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{0, 0}
}

// The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
type Address_IpVersion int32

const (
	// A value indicating that the enum field is not set.
	Address_UNDEFINED_IP_VERSION Address_IpVersion = 0
	Address_IPV4                 Address_IpVersion = 2254341
	Address_IPV6                 Address_IpVersion = 2254343
	Address_UNSPECIFIED_VERSION  Address_IpVersion = 21850000
)

// Enum value maps for Address_IpVersion.
var (
	Address_IpVersion_name = map[int32]string{
		0:        "UNDEFINED_IP_VERSION",
		2254341:  "IPV4",
		2254343:  "IPV6",
		21850000: "UNSPECIFIED_VERSION",
	}
	Address_IpVersion_value = map[string]int32{
		"UNDEFINED_IP_VERSION": 0,
		"IPV4":                 2254341,
		"IPV6":                 2254343,
		"UNSPECIFIED_VERSION":  21850000,
	}
)

func (x Address_IpVersion) Enum() *Address_IpVersion {
	p := new(Address_IpVersion)
	*p = x
	return p
}

func (x Address_IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address_IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[1].Descriptor()
}

func (Address_IpVersion) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[1]
}

func (x Address_IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address_IpVersion.Descriptor instead.
func (Address_IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{0, 1}
}

// This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
//
// If this field is not specified, it is assumed to be PREMIUM.
type Address_NetworkTier int32

const (
	// A value indicating that the enum field is not set.
	Address_UNDEFINED_NETWORK_TIER Address_NetworkTier = 0
	Address_PREMIUM                Address_NetworkTier = 399530551
	Address_STANDARD               Address_NetworkTier = 484642493
)

// Enum value maps for Address_NetworkTier.
var (
	Address_NetworkTier_name = map[int32]string{
		0:         "UNDEFINED_NETWORK_TIER",
		399530551: "PREMIUM",
		484642493: "STANDARD",
	}
	Address_NetworkTier_value = map[string]int32{
		"UNDEFINED_NETWORK_TIER": 0,
		"PREMIUM":                399530551,
		"STANDARD":               484642493,
	}
)

func (x Address_NetworkTier) Enum() *Address_NetworkTier {
	p := new(Address_NetworkTier)
	*p = x
	return p
}

func (x Address_NetworkTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address_NetworkTier) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[2].Descriptor()
}

func (Address_NetworkTier) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[2]
}

func (x Address_NetworkTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address_NetworkTier.Descriptor instead.
func (Address_NetworkTier) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{0, 2}
}

// The purpose of this resource, which can be one of the following values:
// - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
// - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
// - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
// - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
type Address_Purpose int32

const (
	// A value indicating that the enum field is not set.
	Address_UNDEFINED_PURPOSE Address_Purpose = 0
	Address_DNS_RESOLVER      Address_Purpose = 476114556
	Address_GCE_ENDPOINT      Address_Purpose = 230515243
	Address_NAT_AUTO          Address_Purpose = 163666477
	Address_VPC_PEERING       Address_Purpose = 400800170
)

// Enum value maps for Address_Purpose.
var (
	Address_Purpose_name = map[int32]string{
		0:         "UNDEFINED_PURPOSE",
		476114556: "DNS_RESOLVER",
		230515243: "GCE_ENDPOINT",
		163666477: "NAT_AUTO",
		400800170: "VPC_PEERING",
	}
	Address_Purpose_value = map[string]int32{
		"UNDEFINED_PURPOSE": 0,
		"DNS_RESOLVER":      476114556,
		"GCE_ENDPOINT":      230515243,
		"NAT_AUTO":          163666477,
		"VPC_PEERING":       400800170,
	}
)

func (x Address_Purpose) Enum() *Address_Purpose {
	p := new(Address_Purpose)
	*p = x
	return p
}

func (x Address_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[3].Descriptor()
}

func (Address_Purpose) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[3]
}

func (x Address_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address_Purpose.Descriptor instead.
func (Address_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{0, 3}
}

// [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
type Address_Status int32

const (
	// A value indicating that the enum field is not set.
	Address_UNDEFINED_STATUS Address_Status = 0
	Address_IN_USE           Address_Status = 17393485
	Address_RESERVED         Address_Status = 432241448
	Address_RESERVING        Address_Status = 514587225
)

// Enum value maps for Address_Status.
var (
	Address_Status_name = map[int32]string{
		0:         "UNDEFINED_STATUS",
		17393485:  "IN_USE",
		432241448: "RESERVED",
		514587225: "RESERVING",
	}
	Address_Status_value = map[string]int32{
		"UNDEFINED_STATUS": 0,
		"IN_USE":           17393485,
		"RESERVED":         432241448,
		"RESERVING":        514587225,
	}
)

func (x Address_Status) Enum() *Address_Status {
	p := new(Address_Status)
	*p = x
	return p
}

func (x Address_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Address_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[4].Descriptor()
}

func (Address_Status) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[4]
}

func (x Address_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Address_Status.Descriptor instead.
func (Address_Status) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{0, 4}
}

// [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.
type Operation_Status int32

const (
	// A value indicating that the enum field is not set.
	Operation_UNDEFINED_STATUS Operation_Status = 0
	Operation_DONE             Operation_Status = 2104194
	Operation_PENDING          Operation_Status = 35394935
	Operation_RUNNING          Operation_Status = 121282975
)

// Enum value maps for Operation_Status.
var (
	Operation_Status_name = map[int32]string{
		0:         "UNDEFINED_STATUS",
		2104194:   "DONE",
		35394935:  "PENDING",
		121282975: "RUNNING",
	}
	Operation_Status_value = map[string]int32{
		"UNDEFINED_STATUS": 0,
		"DONE":             2104194,
		"PENDING":          35394935,
		"RUNNING":          121282975,
	}
)

func (x Operation_Status) Enum() *Operation_Status {
	p := new(Operation_Status)
	*p = x
	return p
}

func (x Operation_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[5].Descriptor()
}

func (Operation_Status) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[5]
}

func (x Operation_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Status.Descriptor instead.
func (Operation_Status) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{12, 0}
}

// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
type Warning_Code int32

const (
	// A value indicating that the enum field is not set.
	Warning_UNDEFINED_CODE                            Warning_Code = 0
	Warning_CLEANUP_FAILED                            Warning_Code = 150308440
	Warning_DEPRECATED_RESOURCE_USED                  Warning_Code = 391835586
	Warning_DEPRECATED_TYPE_USED                      Warning_Code = 346526230
	Warning_DISK_SIZE_LARGER_THAN_IMAGE_SIZE          Warning_Code = 369442967
	Warning_EXPERIMENTAL_TYPE_USED                    Warning_Code = 451954443
	Warning_EXTERNAL_API_WARNING                      Warning_Code = 175546307
	Warning_FIELD_VALUE_OVERRIDEN                     Warning_Code = 329669423
	Warning_INJECTED_KERNELS_DEPRECATED               Warning_Code = 417377419
	Warning_MISSING_TYPE_DEPENDENCY                   Warning_Code = 344505463
	Warning_NEXT_HOP_ADDRESS_NOT_ASSIGNED             Warning_Code = 324964999
	Warning_NEXT_HOP_CANNOT_IP_FORWARD                Warning_Code = 383382887
	Warning_NEXT_HOP_INSTANCE_NOT_FOUND               Warning_Code = 464250446
	Warning_NEXT_HOP_INSTANCE_NOT_ON_NETWORK          Warning_Code = 243758146
	Warning_NEXT_HOP_NOT_RUNNING                      Warning_Code = 417081265
	Warning_NOT_CRITICAL_ERROR                        Warning_Code = 105763924
	Warning_NO_RESULTS_ON_PAGE                        Warning_Code = 30036744
	Warning_REQUIRED_TOS_AGREEMENT                    Warning_Code = 3745539
	Warning_RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING Warning_Code = 496728641
	Warning_RESOURCE_NOT_DELETED                      Warning_Code = 168598460
	Warning_SCHEMA_VALIDATION_IGNORED                 Warning_Code = 275245642
	Warning_SINGLE_INSTANCE_PROPERTY_TEMPLATE         Warning_Code = 268305617
	Warning_UNDECLARED_PROPERTIES                     Warning_Code = 390513439
	Warning_UNREACHABLE                               Warning_Code = 13328052
)

// Enum value maps for Warning_Code.
var (
	Warning_Code_name = map[int32]string{
		0:         "UNDEFINED_CODE",
		150308440: "CLEANUP_FAILED",
		391835586: "DEPRECATED_RESOURCE_USED",
		346526230: "DEPRECATED_TYPE_USED",
		369442967: "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
		451954443: "EXPERIMENTAL_TYPE_USED",
		175546307: "EXTERNAL_API_WARNING",
		329669423: "FIELD_VALUE_OVERRIDEN",
		417377419: "INJECTED_KERNELS_DEPRECATED",
		344505463: "MISSING_TYPE_DEPENDENCY",
		324964999: "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
		383382887: "NEXT_HOP_CANNOT_IP_FORWARD",
		464250446: "NEXT_HOP_INSTANCE_NOT_FOUND",
		243758146: "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
		417081265: "NEXT_HOP_NOT_RUNNING",
		105763924: "NOT_CRITICAL_ERROR",
		30036744:  "NO_RESULTS_ON_PAGE",
		3745539:   "REQUIRED_TOS_AGREEMENT",
		496728641: "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
		168598460: "RESOURCE_NOT_DELETED",
		275245642: "SCHEMA_VALIDATION_IGNORED",
		268305617: "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
		390513439: "UNDECLARED_PROPERTIES",
		13328052:  "UNREACHABLE",
	}
	Warning_Code_value = map[string]int32{
		"UNDEFINED_CODE":                            0,
		"CLEANUP_FAILED":                            150308440,
		"DEPRECATED_RESOURCE_USED":                  391835586,
		"DEPRECATED_TYPE_USED":                      346526230,
		"DISK_SIZE_LARGER_THAN_IMAGE_SIZE":          369442967,
		"EXPERIMENTAL_TYPE_USED":                    451954443,
		"EXTERNAL_API_WARNING":                      175546307,
		"FIELD_VALUE_OVERRIDEN":                     329669423,
		"INJECTED_KERNELS_DEPRECATED":               417377419,
		"MISSING_TYPE_DEPENDENCY":                   344505463,
		"NEXT_HOP_ADDRESS_NOT_ASSIGNED":             324964999,
		"NEXT_HOP_CANNOT_IP_FORWARD":                383382887,
		"NEXT_HOP_INSTANCE_NOT_FOUND":               464250446,
		"NEXT_HOP_INSTANCE_NOT_ON_NETWORK":          243758146,
		"NEXT_HOP_NOT_RUNNING":                      417081265,
		"NOT_CRITICAL_ERROR":                        105763924,
		"NO_RESULTS_ON_PAGE":                        30036744,
		"REQUIRED_TOS_AGREEMENT":                    3745539,
		"RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING": 496728641,
		"RESOURCE_NOT_DELETED":                      168598460,
		"SCHEMA_VALIDATION_IGNORED":                 275245642,
		"SINGLE_INSTANCE_PROPERTY_TEMPLATE":         268305617,
		"UNDECLARED_PROPERTIES":                     390513439,
		"UNREACHABLE":                               13328052,
	}
)

func (x Warning_Code) Enum() *Warning_Code {
	p := new(Warning_Code)
	*p = x
	return p
}

func (x Warning_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Warning_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[6].Descriptor()
}

func (Warning_Code) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[6]
}

func (x Warning_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Warning_Code.Descriptor instead.
func (Warning_Code) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{14, 0}
}

// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
type Warnings_Code int32

const (
	// A value indicating that the enum field is not set.
	Warnings_UNDEFINED_CODE                            Warnings_Code = 0
	Warnings_CLEANUP_FAILED                            Warnings_Code = 150308440
	Warnings_DEPRECATED_RESOURCE_USED                  Warnings_Code = 391835586
	Warnings_DEPRECATED_TYPE_USED                      Warnings_Code = 346526230
	Warnings_DISK_SIZE_LARGER_THAN_IMAGE_SIZE          Warnings_Code = 369442967
	Warnings_EXPERIMENTAL_TYPE_USED                    Warnings_Code = 451954443
	Warnings_EXTERNAL_API_WARNING                      Warnings_Code = 175546307
	Warnings_FIELD_VALUE_OVERRIDEN                     Warnings_Code = 329669423
	Warnings_INJECTED_KERNELS_DEPRECATED               Warnings_Code = 417377419
	Warnings_MISSING_TYPE_DEPENDENCY                   Warnings_Code = 344505463
	Warnings_NEXT_HOP_ADDRESS_NOT_ASSIGNED             Warnings_Code = 324964999
	Warnings_NEXT_HOP_CANNOT_IP_FORWARD                Warnings_Code = 383382887
	Warnings_NEXT_HOP_INSTANCE_NOT_FOUND               Warnings_Code = 464250446
	Warnings_NEXT_HOP_INSTANCE_NOT_ON_NETWORK          Warnings_Code = 243758146
	Warnings_NEXT_HOP_NOT_RUNNING                      Warnings_Code = 417081265
	Warnings_NOT_CRITICAL_ERROR                        Warnings_Code = 105763924
	Warnings_NO_RESULTS_ON_PAGE                        Warnings_Code = 30036744
	Warnings_REQUIRED_TOS_AGREEMENT                    Warnings_Code = 3745539
	Warnings_RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING Warnings_Code = 496728641
	Warnings_RESOURCE_NOT_DELETED                      Warnings_Code = 168598460
	Warnings_SCHEMA_VALIDATION_IGNORED                 Warnings_Code = 275245642
	Warnings_SINGLE_INSTANCE_PROPERTY_TEMPLATE         Warnings_Code = 268305617
	Warnings_UNDECLARED_PROPERTIES                     Warnings_Code = 390513439
	Warnings_UNREACHABLE                               Warnings_Code = 13328052
)

// Enum value maps for Warnings_Code.
var (
	Warnings_Code_name = map[int32]string{
		0:         "UNDEFINED_CODE",
		150308440: "CLEANUP_FAILED",
		391835586: "DEPRECATED_RESOURCE_USED",
		346526230: "DEPRECATED_TYPE_USED",
		369442967: "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
		451954443: "EXPERIMENTAL_TYPE_USED",
		175546307: "EXTERNAL_API_WARNING",
		329669423: "FIELD_VALUE_OVERRIDEN",
		417377419: "INJECTED_KERNELS_DEPRECATED",
		344505463: "MISSING_TYPE_DEPENDENCY",
		324964999: "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
		383382887: "NEXT_HOP_CANNOT_IP_FORWARD",
		464250446: "NEXT_HOP_INSTANCE_NOT_FOUND",
		243758146: "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
		417081265: "NEXT_HOP_NOT_RUNNING",
		105763924: "NOT_CRITICAL_ERROR",
		30036744:  "NO_RESULTS_ON_PAGE",
		3745539:   "REQUIRED_TOS_AGREEMENT",
		496728641: "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
		168598460: "RESOURCE_NOT_DELETED",
		275245642: "SCHEMA_VALIDATION_IGNORED",
		268305617: "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
		390513439: "UNDECLARED_PROPERTIES",
		13328052:  "UNREACHABLE",
	}
	Warnings_Code_value = map[string]int32{
		"UNDEFINED_CODE":                            0,
		"CLEANUP_FAILED":                            150308440,
		"DEPRECATED_RESOURCE_USED":                  391835586,
		"DEPRECATED_TYPE_USED":                      346526230,
		"DISK_SIZE_LARGER_THAN_IMAGE_SIZE":          369442967,
		"EXPERIMENTAL_TYPE_USED":                    451954443,
		"EXTERNAL_API_WARNING":                      175546307,
		"FIELD_VALUE_OVERRIDEN":                     329669423,
		"INJECTED_KERNELS_DEPRECATED":               417377419,
		"MISSING_TYPE_DEPENDENCY":                   344505463,
		"NEXT_HOP_ADDRESS_NOT_ASSIGNED":             324964999,
		"NEXT_HOP_CANNOT_IP_FORWARD":                383382887,
		"NEXT_HOP_INSTANCE_NOT_FOUND":               464250446,
		"NEXT_HOP_INSTANCE_NOT_ON_NETWORK":          243758146,
		"NEXT_HOP_NOT_RUNNING":                      417081265,
		"NOT_CRITICAL_ERROR":                        105763924,
		"NO_RESULTS_ON_PAGE":                        30036744,
		"REQUIRED_TOS_AGREEMENT":                    3745539,
		"RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING": 496728641,
		"RESOURCE_NOT_DELETED":                      168598460,
		"SCHEMA_VALIDATION_IGNORED":                 275245642,
		"SINGLE_INSTANCE_PROPERTY_TEMPLATE":         268305617,
		"UNDECLARED_PROPERTIES":                     390513439,
		"UNREACHABLE":                               13328052,
	}
)

func (x Warnings_Code) Enum() *Warnings_Code {
	p := new(Warnings_Code)
	*p = x
	return p
}

func (x Warnings_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Warnings_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_compute_v1small_compute_small_proto_enumTypes[7].Descriptor()
}

func (Warnings_Code) Type() protoreflect.EnumType {
	return &file_google_cloud_compute_v1small_compute_small_proto_enumTypes[7]
}

func (x Warnings_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Warnings_Code.Descriptor instead.
func (Warnings_Code) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{15, 0}
}

//
// Messages
//
// Use global external addresses for GFE-based external HTTP(S) load balancers in Premium Tier.
//
// Use global internal addresses for reserved peering network range.
//
// Use regional external addresses for the following resources:
//
// - External IP addresses for VM instances - Regional external forwarding rules - Cloud NAT external IP addresses - GFE based LBs in Standard Tier - Network LBs in Premium or Standard Tier - Cloud VPN gateways (both Classic and HA)
//
// Use regional internal IP addresses for subnet IP ranges (primary and secondary). This includes:
//
// - Internal IP addresses for VM instances - Alias IP ranges of VM instances (/32 only) - Regional internal forwarding rules - Internal TCP/UDP load balancer addresses - Internal HTTP(S) load balancer addresses - Cloud DNS inbound forwarding IP addresses
//
// For more information, read reserved IP address.
//
// (== resource_for {$api_version}.addresses ==) (== resource_for {$api_version}.globalAddresses ==)
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The static IP address represented by this resource.
	Address *string `protobuf:"bytes,462920692,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
	// Check the AddressType enum for the list of possible values.
	AddressType *string `protobuf:"bytes,264307877,opt,name=address_type,json=addressType,proto3,oneof" json:"address_type,omitempty"`
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `protobuf:"bytes,30525366,opt,name=creation_timestamp,json=creationTimestamp,proto3,oneof" json:"creation_timestamp,omitempty"`
	// An optional description of this resource. Provide this field when you create the resource.
	Description *string `protobuf:"bytes,422937596,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
	Id *uint64 `protobuf:"varint,3355,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
	// Check the IpVersion enum for the list of possible values.
	IpVersion *string `protobuf:"bytes,294959552,opt,name=ip_version,json=ipVersion,proto3,oneof" json:"ip_version,omitempty"`
	// [Output Only] Type of the resource. Always compute#address for addresses.
	Kind *string `protobuf:"bytes,3292052,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
	Name *string `protobuf:"bytes,3373707,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose.
	Network *string `protobuf:"bytes,232872494,opt,name=network,proto3,oneof" json:"network,omitempty"`
	// This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
	//
	// If this field is not specified, it is assumed to be PREMIUM.
	// Check the NetworkTier enum for the list of possible values.
	NetworkTier *string `protobuf:"bytes,517397843,opt,name=network_tier,json=networkTier,proto3,oneof" json:"network_tier,omitempty"`
	// The prefix length if the resource reprensents an IP range.
	PrefixLength *int32 `protobuf:"varint,453565747,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// The purpose of this resource, which can be one of the following values:
	// - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
	// - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
	// - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
	// - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
	// Check the Purpose enum for the list of possible values.
	Purpose *string `protobuf:"bytes,316407070,opt,name=purpose,proto3,oneof" json:"purpose,omitempty"`
	// [Output Only] The URL of the region where the regional address resides. This field is not applicable to global addresses. You must specify this field as part of the HTTP request URL.
	Region *string `protobuf:"bytes,138946292,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// [Output Only] Server-defined URL for the resource.
	SelfLink *string `protobuf:"bytes,456214797,opt,name=self_link,json=selfLink,proto3,oneof" json:"self_link,omitempty"`
	// [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
	// Check the Status enum for the list of possible values.
	Status *string `protobuf:"bytes,181260274,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with a GCE_ENDPOINT or DNS_RESOLVER purpose.
	Subnetwork *string `protobuf:"bytes,307827694,opt,name=subnetwork,proto3,oneof" json:"subnetwork,omitempty"`
	// [Output Only] The URLs of the resources that are using this address.
	Users []string `protobuf:"bytes,111578632,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Address) GetAddressType() string {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return ""
}

func (x *Address) GetCreationTimestamp() string {
	if x != nil && x.CreationTimestamp != nil {
		return *x.CreationTimestamp
	}
	return ""
}

func (x *Address) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Address) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Address) GetIpVersion() string {
	if x != nil && x.IpVersion != nil {
		return *x.IpVersion
	}
	return ""
}

func (x *Address) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Address) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Address) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *Address) GetNetworkTier() string {
	if x != nil && x.NetworkTier != nil {
		return *x.NetworkTier
	}
	return ""
}

func (x *Address) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *Address) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *Address) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Address) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *Address) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *Address) GetSubnetwork() string {
	if x != nil && x.Subnetwork != nil {
		return *x.Subnetwork
	}
	return ""
}

func (x *Address) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

//
type AddressAggregatedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] Unique identifier for the resource; defined by the server.
	Id *string `protobuf:"bytes,3355,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// A list of AddressesScopedList resources.
	Items map[string]*AddressesScopedList `protobuf:"bytes,100526016,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses.
	Kind *string `protobuf:"bytes,3292052,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
	NextPageToken *string `protobuf:"bytes,79797525,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	// [Output Only] Server-defined URL for this resource.
	SelfLink *string `protobuf:"bytes,456214797,opt,name=self_link,json=selfLink,proto3,oneof" json:"self_link,omitempty"`
	// [Output Only] Informational warning message.
	Warning *Warning `protobuf:"bytes,50704284,opt,name=warning,proto3,oneof" json:"warning,omitempty"`
}

func (x *AddressAggregatedList) Reset() {
	*x = AddressAggregatedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAggregatedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAggregatedList) ProtoMessage() {}

func (x *AddressAggregatedList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAggregatedList.ProtoReflect.Descriptor instead.
func (*AddressAggregatedList) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{1}
}

func (x *AddressAggregatedList) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AddressAggregatedList) GetItems() map[string]*AddressesScopedList {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AddressAggregatedList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *AddressAggregatedList) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *AddressAggregatedList) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *AddressAggregatedList) GetWarning() *Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

// Contains a list of addresses.
type AddressList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] Unique identifier for the resource; defined by the server.
	Id *string `protobuf:"bytes,3355,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// A list of Address resources.
	Items []*Address `protobuf:"bytes,100526016,rep,name=items,proto3" json:"items,omitempty"`
	// [Output Only] Type of resource. Always compute#addressList for lists of addresses.
	Kind *string `protobuf:"bytes,3292052,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
	NextPageToken *string `protobuf:"bytes,79797525,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	// [Output Only] Server-defined URL for this resource.
	SelfLink *string `protobuf:"bytes,456214797,opt,name=self_link,json=selfLink,proto3,oneof" json:"self_link,omitempty"`
	// [Output Only] Informational warning message.
	Warning *Warning `protobuf:"bytes,50704284,opt,name=warning,proto3,oneof" json:"warning,omitempty"`
}

func (x *AddressList) Reset() {
	*x = AddressList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressList) ProtoMessage() {}

func (x *AddressList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressList.ProtoReflect.Descriptor instead.
func (*AddressList) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{2}
}

func (x *AddressList) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AddressList) GetItems() []*Address {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AddressList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *AddressList) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *AddressList) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *AddressList) GetWarning() *Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

//
type AddressesScopedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] A list of addresses contained in this scope.
	Addresses []*Address `protobuf:"bytes,337673122,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// [Output Only] Informational warning which replaces the list of addresses when the list is empty.
	Warning *Warning `protobuf:"bytes,50704284,opt,name=warning,proto3,oneof" json:"warning,omitempty"`
}

func (x *AddressesScopedList) Reset() {
	*x = AddressesScopedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressesScopedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressesScopedList) ProtoMessage() {}

func (x *AddressesScopedList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressesScopedList.ProtoReflect.Descriptor instead.
func (*AddressesScopedList) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{3}
}

func (x *AddressesScopedList) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AddressesScopedList) GetWarning() *Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

// A request message for Addresses.AggregatedList. See the method description for details.
type AggregatedListAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
	//
	// For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
	//
	// You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
	//
	// To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
	Filter *string `protobuf:"bytes,336120696,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
	IncludeAllScopes *bool `protobuf:"varint,391327988,opt,name=include_all_scopes,json=includeAllScopes,proto3,oneof" json:"include_all_scopes,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
	MaxResults *uint32 `protobuf:"varint,54715419,opt,name=max_results,json=maxResults,proto3,oneof" json:"max_results,omitempty"`
	// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
	//
	// You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
	//
	// Currently, only sorting by `name` or `creationTimestamp desc` is supported.
	OrderBy *string `protobuf:"bytes,160562920,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
	// Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
	PageToken *string `protobuf:"bytes,19994697,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Project ID for this request.
	Project string `protobuf:"bytes,227560217,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *AggregatedListAddressesRequest) Reset() {
	*x = AggregatedListAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedListAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedListAddressesRequest) ProtoMessage() {}

func (x *AggregatedListAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedListAddressesRequest.ProtoReflect.Descriptor instead.
func (*AggregatedListAddressesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{4}
}

func (x *AggregatedListAddressesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *AggregatedListAddressesRequest) GetIncludeAllScopes() bool {
	if x != nil && x.IncludeAllScopes != nil {
		return *x.IncludeAllScopes
	}
	return false
}

func (x *AggregatedListAddressesRequest) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *AggregatedListAddressesRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *AggregatedListAddressesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *AggregatedListAddressesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

//
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
	Key *string `protobuf:"bytes,106079,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// [Output Only] A warning data value corresponding to the key.
	Value *string `protobuf:"bytes,111972721,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{5}
}

func (x *Data) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Data) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// A request message for Addresses.Delete. See the method description for details.
type DeleteAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the address resource to delete.
	Address string `protobuf:"bytes,462920692,opt,name=address,proto3" json:"address,omitempty"`
	// Project ID for this request.
	Project string `protobuf:"bytes,227560217,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the region for this request.
	Region string `protobuf:"bytes,138946292,opt,name=region,proto3" json:"region,omitempty"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
	//
	// For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `protobuf:"bytes,37109963,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *DeleteAddressRequest) Reset() {
	*x = DeleteAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressRequest) ProtoMessage() {}

func (x *DeleteAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeleteAddressRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteAddressRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DeleteAddressRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

// [Output Only] If errors are generated during processing of the operation, this field will be populated.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] The array of errors encountered while processing this operation.
	Errors []*Errors `protobuf:"bytes,315977579,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{7}
}

func (x *Error) GetErrors() []*Errors {
	if x != nil {
		return x.Errors
	}
	return nil
}

//
type Errors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] The error type identifier for this error.
	Code *string `protobuf:"bytes,3059181,opt,name=code,proto3,oneof" json:"code,omitempty"`
	// [Output Only] Indicates the field in the request that caused the error. This property is optional.
	Location *string `protobuf:"bytes,290430901,opt,name=location,proto3,oneof" json:"location,omitempty"`
	// [Output Only] An optional, human-readable error message.
	Message *string `protobuf:"bytes,418054151,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Errors) Reset() {
	*x = Errors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Errors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Errors) ProtoMessage() {}

func (x *Errors) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Errors.ProtoReflect.Descriptor instead.
func (*Errors) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{8}
}

func (x *Errors) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Errors) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Errors) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// A request message for RegionOperations.Get. See the method description for details.
type GetRegionOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Operations resource to return.
	Operation string `protobuf:"bytes,52090215,opt,name=operation,proto3" json:"operation,omitempty"`
	// Project ID for this request.
	Project string `protobuf:"bytes,227560217,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the region for this request.
	Region string `protobuf:"bytes,138946292,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *GetRegionOperationRequest) Reset() {
	*x = GetRegionOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionOperationRequest) ProtoMessage() {}

func (x *GetRegionOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionOperationRequest.ProtoReflect.Descriptor instead.
func (*GetRegionOperationRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{9}
}

func (x *GetRegionOperationRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GetRegionOperationRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetRegionOperationRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// A request message for Addresses.Insert. See the method description for details.
type InsertAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The body resource for this request
	AddressResource *Address `protobuf:"bytes,483888121,opt,name=address_resource,json=addressResource,proto3" json:"address_resource,omitempty"`
	// Project ID for this request.
	Project string `protobuf:"bytes,227560217,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the region for this request.
	Region string `protobuf:"bytes,138946292,opt,name=region,proto3" json:"region,omitempty"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
	//
	// For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `protobuf:"bytes,37109963,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *InsertAddressRequest) Reset() {
	*x = InsertAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertAddressRequest) ProtoMessage() {}

func (x *InsertAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertAddressRequest.ProtoReflect.Descriptor instead.
func (*InsertAddressRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{10}
}

func (x *InsertAddressRequest) GetAddressResource() *Address {
	if x != nil {
		return x.AddressResource
	}
	return nil
}

func (x *InsertAddressRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *InsertAddressRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *InsertAddressRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

// A request message for Addresses.List. See the method description for details.
type ListAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <.
	//
	// For example, if you are filtering Compute Engine instances, you can exclude instances named example-instance by specifying name != example-instance.
	//
	// You can also filter nested fields. For example, you could specify scheduling.automaticRestart = false to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
	//
	// To filter on multiple expressions, provide each separate expression within parentheses. For example, (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake"). By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly. For example, (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true).
	Filter *string `protobuf:"bytes,336120696,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available results is larger than maxResults, Compute Engine returns a nextPageToken that can be used to get the next page of results in subsequent list requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
	MaxResults *uint32 `protobuf:"varint,54715419,opt,name=max_results,json=maxResults,proto3,oneof" json:"max_results,omitempty"`
	// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
	//
	// You can also sort results in descending order based on the creation timestamp using orderBy="creationTimestamp desc". This sorts results based on the creationTimestamp field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
	//
	// Currently, only sorting by name or creationTimestamp desc is supported.
	OrderBy string `protobuf:"bytes,160562920,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Specifies a page token to use. Set pageToken to the nextPageToken returned by a previous list request to get the next page of results.
	PageToken *string `protobuf:"bytes,19994697,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Project ID for this request.
	Project string `protobuf:"bytes,227560217,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the region for this request.
	Region string `protobuf:"bytes,138946292,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ListAddressesRequest) Reset() {
	*x = ListAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesRequest) ProtoMessage() {}

func (x *ListAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{11}
}

func (x *ListAddressesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListAddressesRequest) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListAddressesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListAddressesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListAddressesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListAddressesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Represents an Operation resource.
//
// Google Compute Engine has three Operation resources:
//
// * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations)
//
// You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses.
//
// Operations can be global, regional or zonal.
// - For global operations, use the globalOperations resource.
// - For regional operations, use the regionOperations resource.
// - For zonal operations, use the zoneOperations resource.
//
// For more information, read  Global, Regional, and Zonal Resources. (== resource_for {$api_version}.globalOperations ==) (== resource_for {$api_version}.regionOperations ==) (== resource_for {$api_version}.zoneOperations ==)
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.
	ClientOperationId *string `protobuf:"bytes,297240295,opt,name=client_operation_id,json=clientOperationId,proto3,oneof" json:"client_operation_id,omitempty"`
	// [Deprecated] This field is deprecated.
	CreationTimestamp *string `protobuf:"bytes,30525366,opt,name=creation_timestamp,json=creationTimestamp,proto3,oneof" json:"creation_timestamp,omitempty"`
	// [Output Only] A textual description of the operation, which is set when the operation is created.
	Description *string `protobuf:"bytes,422937596,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
	EndTime *string `protobuf:"bytes,114938801,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// [Output Only] If errors are generated during processing of the operation, this field will be populated.
	Error *Error `protobuf:"bytes,96784904,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as NOT FOUND.
	HttpErrorMessage *string `protobuf:"bytes,202521945,opt,name=http_error_message,json=httpErrorMessage,proto3,oneof" json:"http_error_message,omitempty"`
	// [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a 404 means the resource was not found.
	HttpErrorStatusCode *int32 `protobuf:"varint,312345196,opt,name=http_error_status_code,json=httpErrorStatusCode,proto3,oneof" json:"http_error_status_code,omitempty"`
	// [Output Only] The unique identifier for the operation. This identifier is defined by the server.
	Id *uint64 `protobuf:"varint,3355,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
	InsertTime *string `protobuf:"bytes,433722515,opt,name=insert_time,json=insertTime,proto3,oneof" json:"insert_time,omitempty"`
	// [Output Only] Type of the resource. Always compute#operation for Operation resources.
	Kind *string `protobuf:"bytes,3292052,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	// [Output Only] Name of the operation.
	Name *string `protobuf:"bytes,3373707,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// [Output Only] The type of operation, such as insert, update, or delete, and so on.
	OperationType *string `protobuf:"bytes,177650450,opt,name=operation_type,json=operationType,proto3,oneof" json:"operation_type,omitempty"`
	// [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
	Progress *int32 `protobuf:"varint,72663597,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
	// [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
	Region *string `protobuf:"bytes,138946292,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// [Output Only] Server-defined URL for the resource.
	SelfLink *string `protobuf:"bytes,456214797,opt,name=self_link,json=selfLink,proto3,oneof" json:"self_link,omitempty"`
	// [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
	StartTime *string `protobuf:"bytes,37467274,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	// [Output Only] The status of the operation, which can be one of the following: PENDING, RUNNING, or DONE.
	Status *Operation_Status `protobuf:"varint,181260274,opt,name=status,proto3,enum=google.cloud.compute.v1small.Operation_Status,oneof" json:"status,omitempty"`
	// [Output Only] An optional textual description of the current status of the operation.
	StatusMessage *string `protobuf:"bytes,297428154,opt,name=status_message,json=statusMessage,proto3,oneof" json:"status_message,omitempty"`
	// [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
	TargetId *uint64 `protobuf:"varint,258165385,opt,name=target_id,json=targetId,proto3,oneof" json:"target_id,omitempty"`
	// [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
	TargetLink *string `protobuf:"bytes,62671336,opt,name=target_link,json=targetLink,proto3,oneof" json:"target_link,omitempty"`
	// [Output Only] User who requested the operation, for example: user@example.com.
	User *string `protobuf:"bytes,3599307,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
	Warnings []*Warnings `protobuf:"bytes,498091095,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
	Zone *string `protobuf:"bytes,3744684,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{12}
}

func (x *Operation) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *Operation) GetCreationTimestamp() string {
	if x != nil && x.CreationTimestamp != nil {
		return *x.CreationTimestamp
	}
	return ""
}

func (x *Operation) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Operation) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *Operation) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Operation) GetHttpErrorMessage() string {
	if x != nil && x.HttpErrorMessage != nil {
		return *x.HttpErrorMessage
	}
	return ""
}

func (x *Operation) GetHttpErrorStatusCode() int32 {
	if x != nil && x.HttpErrorStatusCode != nil {
		return *x.HttpErrorStatusCode
	}
	return 0
}

func (x *Operation) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Operation) GetInsertTime() string {
	if x != nil && x.InsertTime != nil {
		return *x.InsertTime
	}
	return ""
}

func (x *Operation) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Operation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Operation) GetOperationType() string {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return ""
}

func (x *Operation) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *Operation) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Operation) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *Operation) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *Operation) GetStatus() Operation_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Operation_UNDEFINED_STATUS
}

func (x *Operation) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *Operation) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *Operation) GetTargetLink() string {
	if x != nil && x.TargetLink != nil {
		return *x.TargetLink
	}
	return ""
}

func (x *Operation) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *Operation) GetWarnings() []*Warnings {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *Operation) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

// A request message for RegionOperations.Wait. See the method description for details.
type WaitRegionOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Operations resource to return.
	Operation string `protobuf:"bytes,52090215,opt,name=operation,proto3" json:"operation,omitempty"`
	// Project ID for this request.
	Project string `protobuf:"bytes,227560217,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the region for this request.
	Region string `protobuf:"bytes,138946292,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *WaitRegionOperationRequest) Reset() {
	*x = WaitRegionOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitRegionOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitRegionOperationRequest) ProtoMessage() {}

func (x *WaitRegionOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitRegionOperationRequest.ProtoReflect.Descriptor instead.
func (*WaitRegionOperationRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{13}
}

func (x *WaitRegionOperationRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *WaitRegionOperationRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *WaitRegionOperationRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// [Output Only] Informational warning message.
type Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	// Check the Code enum for the list of possible values.
	Code *string `protobuf:"bytes,3059181,opt,name=code,proto3,oneof" json:"code,omitempty"`
	// [Output Only] Metadata about this warning in key: value format. For example:
	// "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data []*Data `protobuf:"bytes,3076010,rep,name=data,proto3" json:"data,omitempty"`
	// [Output Only] A human-readable description of the warning code.
	Message *string `protobuf:"bytes,418054151,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Warning) Reset() {
	*x = Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{14}
}

func (x *Warning) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Warning) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Warning) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

//
type Warnings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	// Check the Code enum for the list of possible values.
	Code *string `protobuf:"bytes,3059181,opt,name=code,proto3,oneof" json:"code,omitempty"`
	// [Output Only] Metadata about this warning in key: value format. For example:
	// "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data []*Data `protobuf:"bytes,3076010,rep,name=data,proto3" json:"data,omitempty"`
	// [Output Only] A human-readable description of the warning code.
	Message *string `protobuf:"bytes,418054151,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Warnings) Reset() {
	*x = Warnings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warnings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warnings) ProtoMessage() {}

func (x *Warnings) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_compute_v1small_compute_small_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warnings.ProtoReflect.Descriptor instead.
func (*Warnings) Descriptor() ([]byte, []int) {
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP(), []int{15}
}

func (x *Warnings) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Warnings) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Warnings) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_google_cloud_compute_v1small_compute_small_proto protoreflect.FileDescriptor

var file_google_cloud_compute_v1small_compute_small_proto_rawDesc = []byte{
	0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x0a, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xf4, 0xb7, 0xde, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa5, 0x89, 0x84, 0x7e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xb6, 0x8f, 0xc7, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfc, 0x87, 0xd6, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x9b, 0x1a,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc0, 0xf3, 0xd2, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x94, 0xf7,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8b, 0xf5, 0xcd, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xae, 0xb4, 0x85, 0x6f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18,
	0xd3, 0xba, 0xdb, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xb3, 0xba, 0xa3,
	0xd8, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x9e, 0xfa, 0xef, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x8d, 0x92, 0xc5, 0xd9, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf2, 0x9f, 0xb7,
	0x56, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0xee, 0xa7, 0xe4, 0x92, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x88, 0x9c, 0x9a, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xcb, 0xa7, 0xfd, 0x10,
	0x12, 0x10, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xbd, 0xed, 0x96,
	0x85, 0x01, 0x12, 0x17, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xe2, 0xee, 0xdb, 0x19, 0x22, 0x5b, 0x0a, 0x09, 0x49,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x85, 0xcc, 0x89, 0x01, 0x12,
	0x0b, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x87, 0xcc, 0x89, 0x01, 0x12, 0x1a, 0x0a, 0x13,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x90, 0xcf, 0xb5, 0x0a, 0x22, 0x4c, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x49, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0xb7,
	0xb4, 0xc1, 0xbe, 0x01, 0x12, 0x10, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x10, 0xbd, 0x9d, 0x8c, 0xe7, 0x01, 0x22, 0x71, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50,
	0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x44, 0x4e, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x10, 0xfc, 0xdc, 0x83, 0xe3, 0x01, 0x12, 0x13,
	0x0a, 0x0c, 0x47, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0xab,
	0xc4, 0xf5, 0x6d, 0x12, 0x0f, 0x0a, 0x08, 0x4e, 0x41, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10,
	0xad, 0xb4, 0x85, 0x4e, 0x12, 0x13, 0x0a, 0x0b, 0x56, 0x50, 0x43, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0xaa, 0xf3, 0x8e, 0xbf, 0x01, 0x22, 0x52, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x06, 0x49, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x10, 0xcd, 0xce, 0xa5, 0x08, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0xa8, 0xf6, 0x8d, 0xce, 0x01, 0x12, 0x11, 0x0a, 0x09, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0xd9, 0xf4, 0xaf, 0xf5, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xec, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x9b, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0xc0, 0xcf, 0xf7, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x94, 0xf7, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x95, 0xba, 0x86, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x8d, 0x92, 0xc5, 0xd9, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x9c, 0xdf,
	0x96, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x04, 0x52,
	0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x6b, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xdc, 0x02, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x9b, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xc0, 0xcf, 0xf7, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x94, 0xf7, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x95, 0xba, 0x86, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x8d, 0x92, 0xc5, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x9c, 0xdf, 0x96, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x04, 0x52, 0x07, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xa2, 0xf7, 0x81, 0xa1, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x9c, 0xdf, 0x96, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xdb, 0x02, 0x0a, 0x1e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xf8, 0x96, 0xa3, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0xf4, 0xe1, 0xcc, 0xba, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x9b, 0xc8, 0x8b, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0xe8, 0xfd, 0xc7, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0xc9, 0xb0, 0xc4, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x99, 0x96, 0xc1, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0xdf, 0xbc, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0xf1, 0xa2, 0xb2, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf4,
	0xb7, 0xde, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x99, 0x96, 0xc1, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xf2,
	0x47, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0,
	0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xf2, 0x47, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xcb, 0x81, 0xd9, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x49, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xeb, 0xde, 0xd5, 0x96, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x8e, 0x01, 0x0a,
	0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0xed, 0xdb, 0xba, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xb5, 0xbf, 0xbe, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x87, 0x80, 0xac, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe7, 0xaa, 0xeb, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x47, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x99, 0x96, 0xc1, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0, 0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xf9, 0x97, 0xde, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x99, 0x96, 0xc1, 0x6c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xf2, 0x47, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0, 0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0,
	0x41, 0x02, 0xf2, 0x47, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0xcb, 0x81, 0xd9, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0xf8, 0x96, 0xa3,
	0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x9b, 0xc8, 0x8b, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0xe8, 0xfd, 0xc7, 0x4c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x25, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xc9, 0xb0,
	0xc4, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x99, 0x96, 0xc1, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0, 0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xae, 0x0b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe7, 0x8d, 0xde, 0x8d, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0xb6, 0x8f, 0xc7, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xfc, 0x87, 0xd6, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb1, 0xa7, 0xe7, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x88, 0xa4, 0x93, 0x2e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x04, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd9, 0xfa, 0xc8, 0x60, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe8, 0x47, 0x04, 0x48, 0x05, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x16,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xec, 0x84, 0xf8, 0x94, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe8, 0x47, 0x03, 0x48, 0x06, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x9b, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x93, 0xa9, 0xe8, 0xce, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x94, 0xf7, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x8b, 0xf5, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe8, 0x47,
	0x01, 0x48, 0x0a, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92,
	0xf6, 0xda, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0xad, 0x84, 0xd3, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x8d, 0x92, 0xc5,
	0xd9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69,
	0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x8a, 0xe9, 0xee, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf2, 0x9f, 0xb7, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x03, 0xe8, 0x47, 0x02, 0x48, 0x10, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xba, 0xc9, 0xe9, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x89,
	0x95, 0x8d, 0x7b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x12, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0xe8, 0x93, 0xf1, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0xcb, 0xd7, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xd7, 0x88, 0xc1, 0xed, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0xac, 0xc7, 0xe4, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x22,
	0x4b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x82, 0xb7, 0x80, 0x01, 0x12, 0x0e, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xf7, 0xaa, 0xf0, 0x10, 0x12, 0x0e, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x9f, 0xc3, 0xea, 0x39, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xe7, 0xaa, 0xeb, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x99, 0x96, 0xc1, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0xf4, 0xcd, 0xa0, 0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x07, 0x0a, 0x07, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xed,
	0xdb, 0xba, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0xaa, 0xdf, 0xbb, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x87, 0x80, 0xac, 0xc7, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x22, 0x99, 0x06, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x0e, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xd8, 0x8c, 0xd6, 0x47, 0x12, 0x20, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44,
	0x10, 0xc2, 0xdf, 0xeb, 0xba, 0x01, 0x12, 0x1c, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x96,
	0xa4, 0x9e, 0xa5, 0x01, 0x12, 0x28, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x97, 0x81, 0x95, 0xb0, 0x01, 0x12, 0x1e,
	0x0a, 0x16, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x8b, 0x8e, 0xc1, 0xd7, 0x01, 0x12, 0x1b,
	0x0a, 0x14, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xc3, 0xbf, 0xda, 0x53, 0x12, 0x1d, 0x0a, 0x15, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x44, 0x45, 0x4e, 0x10, 0xaf, 0xb6, 0x99, 0x9d, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x49, 0x4e,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x8b, 0xd9, 0x82, 0xc7, 0x01, 0x12,
	0x1f, 0x0a, 0x17, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10, 0xf7, 0xf8, 0xa2, 0xa4, 0x01,
	0x12, 0x25, 0x0a, 0x1d, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x10, 0x87, 0xa5, 0xfa, 0x9a, 0x01, 0x12, 0x22, 0x0a, 0x1a, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe7, 0xea, 0xe7, 0xb6, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xce, 0xcc, 0xaf, 0xdd, 0x01,
	0x12, 0x27, 0x0a, 0x20, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0xc2, 0xe8, 0x9d, 0x74, 0x12, 0x1c, 0x0a, 0x14, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0xb1, 0xcf, 0xf0, 0xc6, 0x01, 0x12, 0x19, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd4, 0xa8,
	0xb7, 0x32, 0x12, 0x19, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53,
	0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x88, 0xa6, 0xa9, 0x0e, 0x12, 0x1d, 0x0a,
	0x16, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x53, 0x5f, 0x41, 0x47,
	0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x83, 0xce, 0xe4, 0x01, 0x12, 0x31, 0x0a, 0x29,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x42, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xc1, 0xf4, 0xed, 0xec, 0x01, 0x12,
	0x1b, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xbc, 0xb7, 0xb2, 0x50, 0x12, 0x21, 0x0a, 0x19,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0xca, 0xd4, 0x9f, 0x83, 0x01, 0x12,
	0x28, 0x0a, 0x21, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0xd1, 0x89, 0xf8, 0x7f, 0x12, 0x1d, 0x0a, 0x15, 0x55, 0x4e, 0x44,
	0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x49,
	0x45, 0x53, 0x10, 0x9f, 0x86, 0x9b, 0xba, 0x01, 0x12, 0x12, 0x0a, 0x0b, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xb4, 0xbd, 0xad, 0x06, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb5, 0x07, 0x0a, 0x08, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xed, 0xdb, 0xba, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xaa, 0xdf, 0xbb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x87, 0x80, 0xac, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x99, 0x06, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x0e, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xd8, 0x8c, 0xd6, 0x47, 0x12, 0x20, 0x0a, 0x18,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0xc2, 0xdf, 0xeb, 0xba, 0x01, 0x12, 0x1c,
	0x0a, 0x14, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x96, 0xa4, 0x9e, 0xa5, 0x01, 0x12, 0x28, 0x0a, 0x20,
	0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x10, 0x97, 0x81, 0x95, 0xb0, 0x01, 0x12, 0x1e, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x8b, 0x8e, 0xc1, 0xd7, 0x01, 0x12, 0x1b, 0x0a, 0x14, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xc3,
	0xbf, 0xda, 0x53, 0x12, 0x1d, 0x0a, 0x15, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x4e, 0x10, 0xaf, 0xb6, 0x99,
	0x9d, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x8b, 0xd9, 0x82, 0xc7, 0x01, 0x12, 0x1f, 0x0a, 0x17, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0xf7, 0xf8, 0xa2, 0xa4, 0x01, 0x12, 0x25, 0x0a, 0x1d, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x87, 0xa5, 0xfa, 0x9a, 0x01, 0x12,
	0x22, 0x0a, 0x1a, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe7, 0xea,
	0xe7, 0xb6, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0xce, 0xcc, 0xaf, 0xdd, 0x01, 0x12, 0x27, 0x0a, 0x20, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xc2, 0xe8, 0x9d,
	0x74, 0x12, 0x1c, 0x0a, 0x14, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xb1, 0xcf, 0xf0, 0xc6, 0x01, 0x12,
	0x19, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd4, 0xa8, 0xb7, 0x32, 0x12, 0x19, 0x0a, 0x12, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x10, 0x88, 0xa6, 0xa9, 0x0e, 0x12, 0x1d, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x5f, 0x54, 0x4f, 0x53, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x83, 0xce, 0xe4, 0x01, 0x12, 0x31, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0xc1, 0xf4, 0xed, 0xec, 0x01, 0x12, 0x1b, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0xbc, 0xb7, 0xb2, 0x50, 0x12, 0x21, 0x0a, 0x19, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0xca, 0xd4, 0x9f, 0x83, 0x01, 0x12, 0x28, 0x0a, 0x21, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45,
	0x52, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0xd1, 0x89, 0xf8,
	0x7f, 0x12, 0x1d, 0x0a, 0x15, 0x55, 0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x49, 0x45, 0x53, 0x10, 0x9f, 0x86, 0x9b, 0xba, 0x01,
	0x12, 0x12, 0x0a, 0x0b, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0xb4, 0xbd, 0xad, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xe5, 0x07, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x0e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0xda, 0x41, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0xde, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x45, 0x2a, 0x43, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0xda, 0x41, 0x16, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x8a, 0x4e, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf0, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x3a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0xda, 0x41, 0x1f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x8a, 0x4e, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0xda, 0x41, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x1a, 0x72, 0xca,
	0x41, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x56, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x32, 0xf6, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0xda, 0x41, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2c, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x90, 0x4e, 0x01, 0x12, 0xe2,
	0x01, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x56, 0x22, 0x54, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x77, 0x61, 0x69, 0x74, 0xda, 0x41, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xa4, 0x01, 0xca, 0x41, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2,
	0x41, 0x87, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xc9, 0x01, 0x0a, 0x20, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x50,
	0x01, 0x5a, 0x43, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x3b, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0xaa, 0x02, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x31,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0xca, 0x02, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0xea, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_compute_v1small_compute_small_proto_rawDescOnce sync.Once
	file_google_cloud_compute_v1small_compute_small_proto_rawDescData = file_google_cloud_compute_v1small_compute_small_proto_rawDesc
)

func file_google_cloud_compute_v1small_compute_small_proto_rawDescGZIP() []byte {
	file_google_cloud_compute_v1small_compute_small_proto_rawDescOnce.Do(func() {
		file_google_cloud_compute_v1small_compute_small_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_compute_v1small_compute_small_proto_rawDescData)
	})
	return file_google_cloud_compute_v1small_compute_small_proto_rawDescData
}

var file_google_cloud_compute_v1small_compute_small_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_google_cloud_compute_v1small_compute_small_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_google_cloud_compute_v1small_compute_small_proto_goTypes = []interface{}{
	(Address_AddressType)(0),               // 0: google.cloud.compute.v1small.Address.AddressType
	(Address_IpVersion)(0),                 // 1: google.cloud.compute.v1small.Address.IpVersion
	(Address_NetworkTier)(0),               // 2: google.cloud.compute.v1small.Address.NetworkTier
	(Address_Purpose)(0),                   // 3: google.cloud.compute.v1small.Address.Purpose
	(Address_Status)(0),                    // 4: google.cloud.compute.v1small.Address.Status
	(Operation_Status)(0),                  // 5: google.cloud.compute.v1small.Operation.Status
	(Warning_Code)(0),                      // 6: google.cloud.compute.v1small.Warning.Code
	(Warnings_Code)(0),                     // 7: google.cloud.compute.v1small.Warnings.Code
	(*Address)(nil),                        // 8: google.cloud.compute.v1small.Address
	(*AddressAggregatedList)(nil),          // 9: google.cloud.compute.v1small.AddressAggregatedList
	(*AddressList)(nil),                    // 10: google.cloud.compute.v1small.AddressList
	(*AddressesScopedList)(nil),            // 11: google.cloud.compute.v1small.AddressesScopedList
	(*AggregatedListAddressesRequest)(nil), // 12: google.cloud.compute.v1small.AggregatedListAddressesRequest
	(*Data)(nil),                           // 13: google.cloud.compute.v1small.Data
	(*DeleteAddressRequest)(nil),           // 14: google.cloud.compute.v1small.DeleteAddressRequest
	(*Error)(nil),                          // 15: google.cloud.compute.v1small.Error
	(*Errors)(nil),                         // 16: google.cloud.compute.v1small.Errors
	(*GetRegionOperationRequest)(nil),      // 17: google.cloud.compute.v1small.GetRegionOperationRequest
	(*InsertAddressRequest)(nil),           // 18: google.cloud.compute.v1small.InsertAddressRequest
	(*ListAddressesRequest)(nil),           // 19: google.cloud.compute.v1small.ListAddressesRequest
	(*Operation)(nil),                      // 20: google.cloud.compute.v1small.Operation
	(*WaitRegionOperationRequest)(nil),     // 21: google.cloud.compute.v1small.WaitRegionOperationRequest
	(*Warning)(nil),                        // 22: google.cloud.compute.v1small.Warning
	(*Warnings)(nil),                       // 23: google.cloud.compute.v1small.Warnings
	nil,                                    // 24: google.cloud.compute.v1small.AddressAggregatedList.ItemsEntry
}
var file_google_cloud_compute_v1small_compute_small_proto_depIdxs = []int32{
	24, // 0: google.cloud.compute.v1small.AddressAggregatedList.items:type_name -> google.cloud.compute.v1small.AddressAggregatedList.ItemsEntry
	22, // 1: google.cloud.compute.v1small.AddressAggregatedList.warning:type_name -> google.cloud.compute.v1small.Warning
	8,  // 2: google.cloud.compute.v1small.AddressList.items:type_name -> google.cloud.compute.v1small.Address
	22, // 3: google.cloud.compute.v1small.AddressList.warning:type_name -> google.cloud.compute.v1small.Warning
	8,  // 4: google.cloud.compute.v1small.AddressesScopedList.addresses:type_name -> google.cloud.compute.v1small.Address
	22, // 5: google.cloud.compute.v1small.AddressesScopedList.warning:type_name -> google.cloud.compute.v1small.Warning
	16, // 6: google.cloud.compute.v1small.Error.errors:type_name -> google.cloud.compute.v1small.Errors
	8,  // 7: google.cloud.compute.v1small.InsertAddressRequest.address_resource:type_name -> google.cloud.compute.v1small.Address
	15, // 8: google.cloud.compute.v1small.Operation.error:type_name -> google.cloud.compute.v1small.Error
	5,  // 9: google.cloud.compute.v1small.Operation.status:type_name -> google.cloud.compute.v1small.Operation.Status
	23, // 10: google.cloud.compute.v1small.Operation.warnings:type_name -> google.cloud.compute.v1small.Warnings
	13, // 11: google.cloud.compute.v1small.Warning.data:type_name -> google.cloud.compute.v1small.Data
	13, // 12: google.cloud.compute.v1small.Warnings.data:type_name -> google.cloud.compute.v1small.Data
	11, // 13: google.cloud.compute.v1small.AddressAggregatedList.ItemsEntry.value:type_name -> google.cloud.compute.v1small.AddressesScopedList
	12, // 14: google.cloud.compute.v1small.Addresses.AggregatedList:input_type -> google.cloud.compute.v1small.AggregatedListAddressesRequest
	14, // 15: google.cloud.compute.v1small.Addresses.Delete:input_type -> google.cloud.compute.v1small.DeleteAddressRequest
	18, // 16: google.cloud.compute.v1small.Addresses.Insert:input_type -> google.cloud.compute.v1small.InsertAddressRequest
	19, // 17: google.cloud.compute.v1small.Addresses.List:input_type -> google.cloud.compute.v1small.ListAddressesRequest
	17, // 18: google.cloud.compute.v1small.RegionOperations.Get:input_type -> google.cloud.compute.v1small.GetRegionOperationRequest
	21, // 19: google.cloud.compute.v1small.RegionOperations.Wait:input_type -> google.cloud.compute.v1small.WaitRegionOperationRequest
	9,  // 20: google.cloud.compute.v1small.Addresses.AggregatedList:output_type -> google.cloud.compute.v1small.AddressAggregatedList
	20, // 21: google.cloud.compute.v1small.Addresses.Delete:output_type -> google.cloud.compute.v1small.Operation
	20, // 22: google.cloud.compute.v1small.Addresses.Insert:output_type -> google.cloud.compute.v1small.Operation
	10, // 23: google.cloud.compute.v1small.Addresses.List:output_type -> google.cloud.compute.v1small.AddressList
	20, // 24: google.cloud.compute.v1small.RegionOperations.Get:output_type -> google.cloud.compute.v1small.Operation
	20, // 25: google.cloud.compute.v1small.RegionOperations.Wait:output_type -> google.cloud.compute.v1small.Operation
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_google_cloud_compute_v1small_compute_small_proto_init() }
func file_google_cloud_compute_v1small_compute_small_proto_init() {
	if File_google_cloud_compute_v1small_compute_small_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAggregatedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressesScopedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedListAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Errors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitRegionOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_compute_v1small_compute_small_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warnings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_google_cloud_compute_v1small_compute_small_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_compute_v1small_compute_small_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_google_cloud_compute_v1small_compute_small_proto_goTypes,
		DependencyIndexes: file_google_cloud_compute_v1small_compute_small_proto_depIdxs,
		EnumInfos:         file_google_cloud_compute_v1small_compute_small_proto_enumTypes,
		MessageInfos:      file_google_cloud_compute_v1small_compute_small_proto_msgTypes,
	}.Build()
	File_google_cloud_compute_v1small_compute_small_proto = out.File
	file_google_cloud_compute_v1small_compute_small_proto_rawDesc = nil
	file_google_cloud_compute_v1small_compute_small_proto_goTypes = nil
	file_google_cloud_compute_v1small_compute_small_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AddressesClient is the client API for Addresses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddressesClient interface {
	// Retrieves an aggregated list of addresses.
	AggregatedList(ctx context.Context, in *AggregatedListAddressesRequest, opts ...grpc.CallOption) (*AddressAggregatedList, error)
	// Deletes the specified address resource.
	Delete(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*Operation, error)
	// Creates an address resource in the specified project by using the data included in the request.
	Insert(ctx context.Context, in *InsertAddressRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a list of addresses contained within the specified region.
	List(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*AddressList, error)
}

type addressesClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressesClient(cc grpc.ClientConnInterface) AddressesClient {
	return &addressesClient{cc}
}

func (c *addressesClient) AggregatedList(ctx context.Context, in *AggregatedListAddressesRequest, opts ...grpc.CallOption) (*AddressAggregatedList, error) {
	out := new(AddressAggregatedList)
	err := c.cc.Invoke(ctx, "/google.cloud.compute.v1small.Addresses/AggregatedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) Delete(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.compute.v1small.Addresses/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) Insert(ctx context.Context, in *InsertAddressRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.compute.v1small.Addresses/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesClient) List(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*AddressList, error) {
	out := new(AddressList)
	err := c.cc.Invoke(ctx, "/google.cloud.compute.v1small.Addresses/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressesServer is the server API for Addresses service.
type AddressesServer interface {
	// Retrieves an aggregated list of addresses.
	AggregatedList(context.Context, *AggregatedListAddressesRequest) (*AddressAggregatedList, error)
	// Deletes the specified address resource.
	Delete(context.Context, *DeleteAddressRequest) (*Operation, error)
	// Creates an address resource in the specified project by using the data included in the request.
	Insert(context.Context, *InsertAddressRequest) (*Operation, error)
	// Retrieves a list of addresses contained within the specified region.
	List(context.Context, *ListAddressesRequest) (*AddressList, error)
}

// UnimplementedAddressesServer can be embedded to have forward compatible implementations.
type UnimplementedAddressesServer struct {
}

func (*UnimplementedAddressesServer) AggregatedList(context.Context, *AggregatedListAddressesRequest) (*AddressAggregatedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregatedList not implemented")
}
func (*UnimplementedAddressesServer) Delete(context.Context, *DeleteAddressRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAddressesServer) Insert(context.Context, *InsertAddressRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedAddressesServer) List(context.Context, *ListAddressesRequest) (*AddressList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterAddressesServer(s *grpc.Server, srv AddressesServer) {
	s.RegisterService(&_Addresses_serviceDesc, srv)
}

func _Addresses_AggregatedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).AggregatedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.compute.v1small.Addresses/AggregatedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).AggregatedList(ctx, req.(*AggregatedListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.compute.v1small.Addresses/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).Delete(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.compute.v1small.Addresses/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).Insert(ctx, req.(*InsertAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Addresses_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.compute.v1small.Addresses/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServer).List(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Addresses_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.compute.v1small.Addresses",
	HandlerType: (*AddressesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregatedList",
			Handler:    _Addresses_AggregatedList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Addresses_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Addresses_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Addresses_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/compute/v1small/compute_small.proto",
}

// RegionOperationsClient is the client API for RegionOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionOperationsClient interface {
	// Retrieves the specified region-specific Operations resource.
	Get(ctx context.Context, in *GetRegionOperationRequest, opts ...grpc.CallOption) (*Operation, error)
	// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
	//
	// This method is called on a best-effort basis. Specifically:
	// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
	// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
	Wait(ctx context.Context, in *WaitRegionOperationRequest, opts ...grpc.CallOption) (*Operation, error)
}

type regionOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionOperationsClient(cc grpc.ClientConnInterface) RegionOperationsClient {
	return &regionOperationsClient{cc}
}

func (c *regionOperationsClient) Get(ctx context.Context, in *GetRegionOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.compute.v1small.RegionOperations/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionOperationsClient) Wait(ctx context.Context, in *WaitRegionOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.compute.v1small.RegionOperations/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionOperationsServer is the server API for RegionOperations service.
type RegionOperationsServer interface {
	// Retrieves the specified region-specific Operations resource.
	Get(context.Context, *GetRegionOperationRequest) (*Operation, error)
	// Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress.
	//
	// This method is called on a best-effort basis. Specifically:
	// - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds.
	// - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
	Wait(context.Context, *WaitRegionOperationRequest) (*Operation, error)
}

// UnimplementedRegionOperationsServer can be embedded to have forward compatible implementations.
type UnimplementedRegionOperationsServer struct {
}

func (*UnimplementedRegionOperationsServer) Get(context.Context, *GetRegionOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRegionOperationsServer) Wait(context.Context, *WaitRegionOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}

func RegisterRegionOperationsServer(s *grpc.Server, srv RegionOperationsServer) {
	s.RegisterService(&_RegionOperations_serviceDesc, srv)
}

func _RegionOperations_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionOperationsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.compute.v1small.RegionOperations/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionOperationsServer).Get(ctx, req.(*GetRegionOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionOperations_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRegionOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionOperationsServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.compute.v1small.RegionOperations/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionOperationsServer).Wait(ctx, req.(*WaitRegionOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionOperations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.compute.v1small.RegionOperations",
	HandlerType: (*RegionOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RegionOperations_Get_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _RegionOperations_Wait_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/compute/v1small/compute_small.proto",
}
