// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: google/ads/googleads/v9/common/offline_user_data.proto

package common

import (
	reflect "reflect"
	sync "sync"

	enums "google.golang.org/genproto/googleapis/ads/googleads/v9/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Address identifier of offline data.
type OfflineUserAddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First name of the user, which is hashed as SHA-256 after normalized
	// (Lowercase all characters; Remove any extra spaces before, after, and in
	// between).
	HashedFirstName *string `protobuf:"bytes,7,opt,name=hashed_first_name,json=hashedFirstName,proto3,oneof" json:"hashed_first_name,omitempty"`
	// Last name of the user, which is hashed as SHA-256 after normalized (lower
	// case only and no punctuation).
	HashedLastName *string `protobuf:"bytes,8,opt,name=hashed_last_name,json=hashedLastName,proto3,oneof" json:"hashed_last_name,omitempty"`
	// City of the address. Only accepted for Store Sales and
	// ConversionAdjustmentUploadService.
	City *string `protobuf:"bytes,9,opt,name=city,proto3,oneof" json:"city,omitempty"`
	// State code of the address. Only accepted for Store Sales and
	// ConversionAdjustmentUploadService.
	State *string `protobuf:"bytes,10,opt,name=state,proto3,oneof" json:"state,omitempty"`
	// 2-letter country code in ISO-3166-1 alpha-2 of the user's address.
	CountryCode *string `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3,oneof" json:"country_code,omitempty"`
	// Postal code of the user's address.
	PostalCode *string `protobuf:"bytes,12,opt,name=postal_code,json=postalCode,proto3,oneof" json:"postal_code,omitempty"`
	// The street address of the user hashed using SHA-256 hash function after
	// normalization (lower case only). Only accepted for
	// ConversionAdjustmentUploadService.
	HashedStreetAddress *string `protobuf:"bytes,13,opt,name=hashed_street_address,json=hashedStreetAddress,proto3,oneof" json:"hashed_street_address,omitempty"`
}

func (x *OfflineUserAddressInfo) Reset() {
	*x = OfflineUserAddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineUserAddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineUserAddressInfo) ProtoMessage() {}

func (x *OfflineUserAddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineUserAddressInfo.ProtoReflect.Descriptor instead.
func (*OfflineUserAddressInfo) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{0}
}

func (x *OfflineUserAddressInfo) GetHashedFirstName() string {
	if x != nil && x.HashedFirstName != nil {
		return *x.HashedFirstName
	}
	return ""
}

func (x *OfflineUserAddressInfo) GetHashedLastName() string {
	if x != nil && x.HashedLastName != nil {
		return *x.HashedLastName
	}
	return ""
}

func (x *OfflineUserAddressInfo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *OfflineUserAddressInfo) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *OfflineUserAddressInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *OfflineUserAddressInfo) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *OfflineUserAddressInfo) GetHashedStreetAddress() string {
	if x != nil && x.HashedStreetAddress != nil {
		return *x.HashedStreetAddress
	}
	return ""
}

// User identifying information.
type UserIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source of the user identifier when the upload is from Store Sales,
	// ConversionUploadService, or ConversionAdjustmentUploadService.
	UserIdentifierSource enums.UserIdentifierSourceEnum_UserIdentifierSource `protobuf:"varint,6,opt,name=user_identifier_source,json=userIdentifierSource,proto3,enum=google.ads.googleads.v9.enums.UserIdentifierSourceEnum_UserIdentifierSource" json:"user_identifier_source,omitempty"`
	// Exactly one must be specified. For OfflineUserDataJobService, Customer
	// Match accepts hashed_email, hashed_phone_number, mobile_id,
	// third_party_user_id, and address_info; Store Sales accepts hashed_email,
	// hashed_phone_number, third_party_user_id, and address_info.
	// ConversionUploadService accepts hashed_email and hashed_phone_number.
	// ConversionAdjustmentUploadService accepts hashed_email,
	// hashed_phone_number, and address_info.
	//
	// Types that are assignable to Identifier:
	//	*UserIdentifier_HashedEmail
	//	*UserIdentifier_HashedPhoneNumber
	//	*UserIdentifier_MobileId
	//	*UserIdentifier_ThirdPartyUserId
	//	*UserIdentifier_AddressInfo
	Identifier isUserIdentifier_Identifier `protobuf_oneof:"identifier"`
}

func (x *UserIdentifier) Reset() {
	*x = UserIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentifier) ProtoMessage() {}

func (x *UserIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentifier.ProtoReflect.Descriptor instead.
func (*UserIdentifier) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{1}
}

func (x *UserIdentifier) GetUserIdentifierSource() enums.UserIdentifierSourceEnum_UserIdentifierSource {
	if x != nil {
		return x.UserIdentifierSource
	}
	return enums.UserIdentifierSourceEnum_UserIdentifierSource(0)
}

func (m *UserIdentifier) GetIdentifier() isUserIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *UserIdentifier) GetHashedEmail() string {
	if x, ok := x.GetIdentifier().(*UserIdentifier_HashedEmail); ok {
		return x.HashedEmail
	}
	return ""
}

func (x *UserIdentifier) GetHashedPhoneNumber() string {
	if x, ok := x.GetIdentifier().(*UserIdentifier_HashedPhoneNumber); ok {
		return x.HashedPhoneNumber
	}
	return ""
}

func (x *UserIdentifier) GetMobileId() string {
	if x, ok := x.GetIdentifier().(*UserIdentifier_MobileId); ok {
		return x.MobileId
	}
	return ""
}

func (x *UserIdentifier) GetThirdPartyUserId() string {
	if x, ok := x.GetIdentifier().(*UserIdentifier_ThirdPartyUserId); ok {
		return x.ThirdPartyUserId
	}
	return ""
}

func (x *UserIdentifier) GetAddressInfo() *OfflineUserAddressInfo {
	if x, ok := x.GetIdentifier().(*UserIdentifier_AddressInfo); ok {
		return x.AddressInfo
	}
	return nil
}

type isUserIdentifier_Identifier interface {
	isUserIdentifier_Identifier()
}

type UserIdentifier_HashedEmail struct {
	// Hashed email address using SHA-256 hash function after normalization.
	// Accepted for Customer Match, Store Sales, ConversionUploadService, and
	// ConversionAdjustmentUploadService.
	HashedEmail string `protobuf:"bytes,7,opt,name=hashed_email,json=hashedEmail,proto3,oneof"`
}

type UserIdentifier_HashedPhoneNumber struct {
	// Hashed phone number using SHA-256 hash function after normalization
	// (E164 standard). Accepted for Customer Match, Store Sales,
	// ConversionUploadService, and ConversionAdjustmentUploadService.
	HashedPhoneNumber string `protobuf:"bytes,8,opt,name=hashed_phone_number,json=hashedPhoneNumber,proto3,oneof"`
}

type UserIdentifier_MobileId struct {
	// Mobile device ID (advertising ID/IDFA). Accepted only for Customer Match.
	MobileId string `protobuf:"bytes,9,opt,name=mobile_id,json=mobileId,proto3,oneof"`
}

type UserIdentifier_ThirdPartyUserId struct {
	// Advertiser-assigned user ID for Customer Match upload, or
	// third-party-assigned user ID for Store Sales. Accepted only for Customer
	// Match and Store Sales.
	ThirdPartyUserId string `protobuf:"bytes,10,opt,name=third_party_user_id,json=thirdPartyUserId,proto3,oneof"`
}

type UserIdentifier_AddressInfo struct {
	// Address information. Accepted only for Customer Match, Store Sales, and
	// ConversionAdjustmentUploadService.
	AddressInfo *OfflineUserAddressInfo `protobuf:"bytes,5,opt,name=address_info,json=addressInfo,proto3,oneof"`
}

func (*UserIdentifier_HashedEmail) isUserIdentifier_Identifier() {}

func (*UserIdentifier_HashedPhoneNumber) isUserIdentifier_Identifier() {}

func (*UserIdentifier_MobileId) isUserIdentifier_Identifier() {}

func (*UserIdentifier_ThirdPartyUserId) isUserIdentifier_Identifier() {}

func (*UserIdentifier_AddressInfo) isUserIdentifier_Identifier() {}

// Attribute of the store sales transaction.
type TransactionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when transaction occurred. Required.
	// The format is "YYYY-MM-DD HH:MM:SS[+/-HH:MM]", where [+/-HH:MM] is an
	// optional timezone offset from UTC. If the offset is absent, the API will
	// use the account's timezone as default.
	// Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30+03:00"
	TransactionDateTime *string `protobuf:"bytes,8,opt,name=transaction_date_time,json=transactionDateTime,proto3,oneof" json:"transaction_date_time,omitempty"`
	// Transaction amount in micros. Required.
	// Transaction amount in micros needs to be greater than 1000.
	// If item Attributes are provided, it represents the total value of the
	// items, after multiplying the unit price per item by the quantity provided
	// in the ItemAttributes.
	TransactionAmountMicros *float64 `protobuf:"fixed64,9,opt,name=transaction_amount_micros,json=transactionAmountMicros,proto3,oneof" json:"transaction_amount_micros,omitempty"`
	// Transaction currency code. ISO 4217 three-letter code is used. Required.
	CurrencyCode *string `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3,oneof" json:"currency_code,omitempty"`
	// The resource name of conversion action to report conversions to.
	// Required.
	ConversionAction *string `protobuf:"bytes,11,opt,name=conversion_action,json=conversionAction,proto3,oneof" json:"conversion_action,omitempty"`
	// Transaction order id.
	// Accessible only to customers on the allow-list.
	OrderId *string `protobuf:"bytes,12,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	// Store attributes of the transaction.
	// Accessible only to customers on the allow-list.
	StoreAttribute *StoreAttribute `protobuf:"bytes,6,opt,name=store_attribute,json=storeAttribute,proto3" json:"store_attribute,omitempty"`
	// Value of the custom variable for each transaction.
	// Accessible only to customers on the allow-list.
	CustomValue *string `protobuf:"bytes,13,opt,name=custom_value,json=customValue,proto3,oneof" json:"custom_value,omitempty"`
	// Item attributes of the transaction.
	ItemAttribute *ItemAttribute `protobuf:"bytes,14,opt,name=item_attribute,json=itemAttribute,proto3" json:"item_attribute,omitempty"`
}

func (x *TransactionAttribute) Reset() {
	*x = TransactionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAttribute) ProtoMessage() {}

func (x *TransactionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAttribute.ProtoReflect.Descriptor instead.
func (*TransactionAttribute) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionAttribute) GetTransactionDateTime() string {
	if x != nil && x.TransactionDateTime != nil {
		return *x.TransactionDateTime
	}
	return ""
}

func (x *TransactionAttribute) GetTransactionAmountMicros() float64 {
	if x != nil && x.TransactionAmountMicros != nil {
		return *x.TransactionAmountMicros
	}
	return 0
}

func (x *TransactionAttribute) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *TransactionAttribute) GetConversionAction() string {
	if x != nil && x.ConversionAction != nil {
		return *x.ConversionAction
	}
	return ""
}

func (x *TransactionAttribute) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *TransactionAttribute) GetStoreAttribute() *StoreAttribute {
	if x != nil {
		return x.StoreAttribute
	}
	return nil
}

func (x *TransactionAttribute) GetCustomValue() string {
	if x != nil && x.CustomValue != nil {
		return *x.CustomValue
	}
	return ""
}

func (x *TransactionAttribute) GetItemAttribute() *ItemAttribute {
	if x != nil {
		return x.ItemAttribute
	}
	return nil
}

// Store attributes of the transaction.
type StoreAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store code from
	// https://support.google.com/business/answer/3370250#storecode
	StoreCode *string `protobuf:"bytes,2,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
}

func (x *StoreAttribute) Reset() {
	*x = StoreAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreAttribute) ProtoMessage() {}

func (x *StoreAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreAttribute.ProtoReflect.Descriptor instead.
func (*StoreAttribute) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{3}
}

func (x *StoreAttribute) GetStoreCode() string {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return ""
}

// Item attributes of the transaction.
type ItemAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of a product. It can be either the Merchant Center Item
	// ID or GTIN (Global Trade Item Number).
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// ID of the Merchant Center Account.
	MerchantId *int64 `protobuf:"varint,2,opt,name=merchant_id,json=merchantId,proto3,oneof" json:"merchant_id,omitempty"`
	// Common Locale Data Repository (CLDR) territory code of the country
	// associated with the feed where your items are uploaded. See
	// https://developers.google.com/google-ads/api/reference/data/codes-formats#country-codes
	// for more information.
	CountryCode string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// ISO 639-1 code of the language associated with the feed where your items
	// are uploaded
	LanguageCode string `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// The number of items sold. Defaults to 1 if not set.
	Quantity int64 `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ItemAttribute) Reset() {
	*x = ItemAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemAttribute) ProtoMessage() {}

func (x *ItemAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemAttribute.ProtoReflect.Descriptor instead.
func (*ItemAttribute) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{4}
}

func (x *ItemAttribute) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ItemAttribute) GetMerchantId() int64 {
	if x != nil && x.MerchantId != nil {
		return *x.MerchantId
	}
	return 0
}

func (x *ItemAttribute) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ItemAttribute) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *ItemAttribute) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// User data holding user identifiers and attributes.
type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User identification info. Required.
	UserIdentifiers []*UserIdentifier `protobuf:"bytes,1,rep,name=user_identifiers,json=userIdentifiers,proto3" json:"user_identifiers,omitempty"`
	// Additional transactions/attributes associated with the user.
	// Required when updating store sales data.
	TransactionAttribute *TransactionAttribute `protobuf:"bytes,2,opt,name=transaction_attribute,json=transactionAttribute,proto3" json:"transaction_attribute,omitempty"`
	// Additional attributes associated with the user. Required when updating
	// customer match attributes. These have an expiration of 540 days.
	UserAttribute *UserAttribute `protobuf:"bytes,3,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{5}
}

func (x *UserData) GetUserIdentifiers() []*UserIdentifier {
	if x != nil {
		return x.UserIdentifiers
	}
	return nil
}

func (x *UserData) GetTransactionAttribute() *TransactionAttribute {
	if x != nil {
		return x.TransactionAttribute
	}
	return nil
}

func (x *UserData) GetUserAttribute() *UserAttribute {
	if x != nil {
		return x.UserAttribute
	}
	return nil
}

// User attribute, can only be used with CUSTOMER_MATCH_WITH_ATTRIBUTES job
// type.
type UserAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Advertiser defined lifetime value for the user.
	LifetimeValueMicros *int64 `protobuf:"varint,1,opt,name=lifetime_value_micros,json=lifetimeValueMicros,proto3,oneof" json:"lifetime_value_micros,omitempty"`
	// Advertiser defined lifetime value bucket for the user. The valid range for
	// a lifetime value bucket is from 1 (low) to 10 (high), except for remove
	// operation where 0 will also be accepted.
	LifetimeValueBucket *int32 `protobuf:"varint,2,opt,name=lifetime_value_bucket,json=lifetimeValueBucket,proto3,oneof" json:"lifetime_value_bucket,omitempty"`
	// Timestamp of the last purchase made by the user.
	// The format is YYYY-MM-DD HH:MM:SS[+/-HH:MM], where [+/-HH:MM] is an
	// optional timezone offset from UTC. If the offset is absent, the API will
	// use the account's timezone as default.
	LastPurchaseDateTime string `protobuf:"bytes,3,opt,name=last_purchase_date_time,json=lastPurchaseDateTime,proto3" json:"last_purchase_date_time,omitempty"`
	// Advertiser defined average number of purchases that are made by the user in
	// a 30 day period.
	AveragePurchaseCount int32 `protobuf:"varint,4,opt,name=average_purchase_count,json=averagePurchaseCount,proto3" json:"average_purchase_count,omitempty"`
	// Advertiser defined average purchase value in micros for the user.
	AveragePurchaseValueMicros int64 `protobuf:"varint,5,opt,name=average_purchase_value_micros,json=averagePurchaseValueMicros,proto3" json:"average_purchase_value_micros,omitempty"`
	// Timestamp when the user was acquired.
	// The format is YYYY-MM-DD HH:MM:SS[+/-HH:MM], where [+/-HH:MM] is an
	// optional timezone offset from UTC. If the offset is absent, the API will
	// use the account's timezone as default.
	AcquisitionDateTime string `protobuf:"bytes,6,opt,name=acquisition_date_time,json=acquisitionDateTime,proto3" json:"acquisition_date_time,omitempty"`
	// The shopping loyalty related data. Shopping utilizes this data to provide
	// users with a better experience. Accessible only to merchants on the
	// allow-list with users’ consent.
	ShoppingLoyalty *ShoppingLoyalty `protobuf:"bytes,7,opt,name=shopping_loyalty,json=shoppingLoyalty,proto3,oneof" json:"shopping_loyalty,omitempty"`
}

func (x *UserAttribute) Reset() {
	*x = UserAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttribute) ProtoMessage() {}

func (x *UserAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttribute.ProtoReflect.Descriptor instead.
func (*UserAttribute) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{6}
}

func (x *UserAttribute) GetLifetimeValueMicros() int64 {
	if x != nil && x.LifetimeValueMicros != nil {
		return *x.LifetimeValueMicros
	}
	return 0
}

func (x *UserAttribute) GetLifetimeValueBucket() int32 {
	if x != nil && x.LifetimeValueBucket != nil {
		return *x.LifetimeValueBucket
	}
	return 0
}

func (x *UserAttribute) GetLastPurchaseDateTime() string {
	if x != nil {
		return x.LastPurchaseDateTime
	}
	return ""
}

func (x *UserAttribute) GetAveragePurchaseCount() int32 {
	if x != nil {
		return x.AveragePurchaseCount
	}
	return 0
}

func (x *UserAttribute) GetAveragePurchaseValueMicros() int64 {
	if x != nil {
		return x.AveragePurchaseValueMicros
	}
	return 0
}

func (x *UserAttribute) GetAcquisitionDateTime() string {
	if x != nil {
		return x.AcquisitionDateTime
	}
	return ""
}

func (x *UserAttribute) GetShoppingLoyalty() *ShoppingLoyalty {
	if x != nil {
		return x.ShoppingLoyalty
	}
	return nil
}

// The shopping loyalty related data. Shopping utilizes this data to provide
// users with a better experience.
// Accessible only to merchants on the allow-list.
type ShoppingLoyalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The membership tier. It is a free-form string as each merchant may have
	// their own loyalty system. For example, it could be a number from 1 to 10,
	// or a string such as "Golden" or "Silver", or even empty string "".
	LoyaltyTier *string `protobuf:"bytes,1,opt,name=loyalty_tier,json=loyaltyTier,proto3,oneof" json:"loyalty_tier,omitempty"`
}

func (x *ShoppingLoyalty) Reset() {
	*x = ShoppingLoyalty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShoppingLoyalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShoppingLoyalty) ProtoMessage() {}

func (x *ShoppingLoyalty) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShoppingLoyalty.ProtoReflect.Descriptor instead.
func (*ShoppingLoyalty) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{7}
}

func (x *ShoppingLoyalty) GetLoyaltyTier() string {
	if x != nil && x.LoyaltyTier != nil {
		return *x.LoyaltyTier
	}
	return ""
}

// Metadata for customer match user list.
type CustomerMatchUserListMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of remarketing list to update data.
	// Required for job of CUSTOMER_MATCH_USER_LIST type.
	UserList *string `protobuf:"bytes,2,opt,name=user_list,json=userList,proto3,oneof" json:"user_list,omitempty"`
}

func (x *CustomerMatchUserListMetadata) Reset() {
	*x = CustomerMatchUserListMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerMatchUserListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerMatchUserListMetadata) ProtoMessage() {}

func (x *CustomerMatchUserListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerMatchUserListMetadata.ProtoReflect.Descriptor instead.
func (*CustomerMatchUserListMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{8}
}

func (x *CustomerMatchUserListMetadata) GetUserList() string {
	if x != nil && x.UserList != nil {
		return *x.UserList
	}
	return ""
}

// Metadata for Store Sales Direct.
type StoreSalesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the fraction of all transactions that are identifiable (i.e.,
	// associated with any form of customer information).
	// Required.
	// The fraction needs to be between 0 and 1 (excluding 0).
	LoyaltyFraction *float64 `protobuf:"fixed64,5,opt,name=loyalty_fraction,json=loyaltyFraction,proto3,oneof" json:"loyalty_fraction,omitempty"`
	// This is the ratio of sales being uploaded compared to the overall sales
	// that can be associated with a customer. Required.
	// The fraction needs to be between 0 and 1 (excluding 0). For example, if you
	// upload half the sales that you are able to associate with a customer, this
	// would be 0.5.
	TransactionUploadFraction *float64 `protobuf:"fixed64,6,opt,name=transaction_upload_fraction,json=transactionUploadFraction,proto3,oneof" json:"transaction_upload_fraction,omitempty"`
	// Name of the store sales custom variable key. A predefined key that
	// can be applied to the transaction and then later used for custom
	// segmentation in reporting.
	// Accessible only to customers on the allow-list.
	CustomKey *string `protobuf:"bytes,7,opt,name=custom_key,json=customKey,proto3,oneof" json:"custom_key,omitempty"`
	// Metadata for a third party Store Sales upload.
	ThirdPartyMetadata *StoreSalesThirdPartyMetadata `protobuf:"bytes,3,opt,name=third_party_metadata,json=thirdPartyMetadata,proto3" json:"third_party_metadata,omitempty"`
}

func (x *StoreSalesMetadata) Reset() {
	*x = StoreSalesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSalesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSalesMetadata) ProtoMessage() {}

func (x *StoreSalesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSalesMetadata.ProtoReflect.Descriptor instead.
func (*StoreSalesMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{9}
}

func (x *StoreSalesMetadata) GetLoyaltyFraction() float64 {
	if x != nil && x.LoyaltyFraction != nil {
		return *x.LoyaltyFraction
	}
	return 0
}

func (x *StoreSalesMetadata) GetTransactionUploadFraction() float64 {
	if x != nil && x.TransactionUploadFraction != nil {
		return *x.TransactionUploadFraction
	}
	return 0
}

func (x *StoreSalesMetadata) GetCustomKey() string {
	if x != nil && x.CustomKey != nil {
		return *x.CustomKey
	}
	return ""
}

func (x *StoreSalesMetadata) GetThirdPartyMetadata() *StoreSalesThirdPartyMetadata {
	if x != nil {
		return x.ThirdPartyMetadata
	}
	return nil
}

// Metadata for a third party Store Sales.
// This product is only for customers on the allow-list. Please contact your
// Google business development representative for details on the upload
// configuration.
type StoreSalesThirdPartyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time the advertiser uploaded the data to the partner. Required.
	// The format is "YYYY-MM-DD HH:MM:SS".
	// Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
	AdvertiserUploadDateTime *string `protobuf:"bytes,7,opt,name=advertiser_upload_date_time,json=advertiserUploadDateTime,proto3,oneof" json:"advertiser_upload_date_time,omitempty"`
	// The fraction of transactions that are valid. Invalid transactions may
	// include invalid formats or values.
	// Required.
	// The fraction needs to be between 0 and 1 (excluding 0).
	ValidTransactionFraction *float64 `protobuf:"fixed64,8,opt,name=valid_transaction_fraction,json=validTransactionFraction,proto3,oneof" json:"valid_transaction_fraction,omitempty"`
	// The fraction of valid transactions that are matched to a third party
	// assigned user ID on the partner side.
	// Required.
	// The fraction needs to be between 0 and 1 (excluding 0).
	PartnerMatchFraction *float64 `protobuf:"fixed64,9,opt,name=partner_match_fraction,json=partnerMatchFraction,proto3,oneof" json:"partner_match_fraction,omitempty"`
	// The fraction of valid transactions that are uploaded by the partner to
	// Google.
	// Required.
	// The fraction needs to be between 0 and 1 (excluding 0).
	PartnerUploadFraction *float64 `protobuf:"fixed64,10,opt,name=partner_upload_fraction,json=partnerUploadFraction,proto3,oneof" json:"partner_upload_fraction,omitempty"`
	// Version of partner IDs to be used for uploads. Required.
	BridgeMapVersionId *string `protobuf:"bytes,11,opt,name=bridge_map_version_id,json=bridgeMapVersionId,proto3,oneof" json:"bridge_map_version_id,omitempty"`
	// ID of the third party partner updating the transaction feed.
	PartnerId *int64 `protobuf:"varint,12,opt,name=partner_id,json=partnerId,proto3,oneof" json:"partner_id,omitempty"`
}

func (x *StoreSalesThirdPartyMetadata) Reset() {
	*x = StoreSalesThirdPartyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSalesThirdPartyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSalesThirdPartyMetadata) ProtoMessage() {}

func (x *StoreSalesThirdPartyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSalesThirdPartyMetadata.ProtoReflect.Descriptor instead.
func (*StoreSalesThirdPartyMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP(), []int{10}
}

func (x *StoreSalesThirdPartyMetadata) GetAdvertiserUploadDateTime() string {
	if x != nil && x.AdvertiserUploadDateTime != nil {
		return *x.AdvertiserUploadDateTime
	}
	return ""
}

func (x *StoreSalesThirdPartyMetadata) GetValidTransactionFraction() float64 {
	if x != nil && x.ValidTransactionFraction != nil {
		return *x.ValidTransactionFraction
	}
	return 0
}

func (x *StoreSalesThirdPartyMetadata) GetPartnerMatchFraction() float64 {
	if x != nil && x.PartnerMatchFraction != nil {
		return *x.PartnerMatchFraction
	}
	return 0
}

func (x *StoreSalesThirdPartyMetadata) GetPartnerUploadFraction() float64 {
	if x != nil && x.PartnerUploadFraction != nil {
		return *x.PartnerUploadFraction
	}
	return 0
}

func (x *StoreSalesThirdPartyMetadata) GetBridgeMapVersionId() string {
	if x != nil && x.BridgeMapVersionId != nil {
		return *x.BridgeMapVersionId
	}
	return ""
}

func (x *StoreSalesThirdPartyMetadata) GetPartnerId() int64 {
	if x != nil && x.PartnerId != nil {
		return *x.PartnerId
	}
	return 0
}

var File_google_ads_googleads_v9_common_offline_user_data_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v9_common_offline_user_data_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76,
	0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xac, 0x03, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a,
	0x11, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x13, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xa7, 0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30,
	0x0a, 0x13, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x5b, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xe1, 0x04, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0e, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x43, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x69, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x13,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xe1, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x10, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x6e, 0x0a, 0x14, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x98, 0x04, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x1b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x16, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4d, 0x61,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0xef, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x14, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x1e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x64, 0x73, 0x2e, 0x56, 0x39, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca, 0x02, 0x1e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x64, 0x73, 0x5c, 0x56, 0x39, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xea, 0x02, 0x22,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x39, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescData = file_google_ads_googleads_v9_common_offline_user_data_proto_rawDesc
)

func file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescData)
	})
	return file_google_ads_googleads_v9_common_offline_user_data_proto_rawDescData
}

var file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_google_ads_googleads_v9_common_offline_user_data_proto_goTypes = []interface{}{
	(*OfflineUserAddressInfo)(nil),                           // 0: google.ads.googleads.v9.common.OfflineUserAddressInfo
	(*UserIdentifier)(nil),                                   // 1: google.ads.googleads.v9.common.UserIdentifier
	(*TransactionAttribute)(nil),                             // 2: google.ads.googleads.v9.common.TransactionAttribute
	(*StoreAttribute)(nil),                                   // 3: google.ads.googleads.v9.common.StoreAttribute
	(*ItemAttribute)(nil),                                    // 4: google.ads.googleads.v9.common.ItemAttribute
	(*UserData)(nil),                                         // 5: google.ads.googleads.v9.common.UserData
	(*UserAttribute)(nil),                                    // 6: google.ads.googleads.v9.common.UserAttribute
	(*ShoppingLoyalty)(nil),                                  // 7: google.ads.googleads.v9.common.ShoppingLoyalty
	(*CustomerMatchUserListMetadata)(nil),                    // 8: google.ads.googleads.v9.common.CustomerMatchUserListMetadata
	(*StoreSalesMetadata)(nil),                               // 9: google.ads.googleads.v9.common.StoreSalesMetadata
	(*StoreSalesThirdPartyMetadata)(nil),                     // 10: google.ads.googleads.v9.common.StoreSalesThirdPartyMetadata
	(enums.UserIdentifierSourceEnum_UserIdentifierSource)(0), // 11: google.ads.googleads.v9.enums.UserIdentifierSourceEnum.UserIdentifierSource
}
var file_google_ads_googleads_v9_common_offline_user_data_proto_depIdxs = []int32{
	11, // 0: google.ads.googleads.v9.common.UserIdentifier.user_identifier_source:type_name -> google.ads.googleads.v9.enums.UserIdentifierSourceEnum.UserIdentifierSource
	0,  // 1: google.ads.googleads.v9.common.UserIdentifier.address_info:type_name -> google.ads.googleads.v9.common.OfflineUserAddressInfo
	3,  // 2: google.ads.googleads.v9.common.TransactionAttribute.store_attribute:type_name -> google.ads.googleads.v9.common.StoreAttribute
	4,  // 3: google.ads.googleads.v9.common.TransactionAttribute.item_attribute:type_name -> google.ads.googleads.v9.common.ItemAttribute
	1,  // 4: google.ads.googleads.v9.common.UserData.user_identifiers:type_name -> google.ads.googleads.v9.common.UserIdentifier
	2,  // 5: google.ads.googleads.v9.common.UserData.transaction_attribute:type_name -> google.ads.googleads.v9.common.TransactionAttribute
	6,  // 6: google.ads.googleads.v9.common.UserData.user_attribute:type_name -> google.ads.googleads.v9.common.UserAttribute
	7,  // 7: google.ads.googleads.v9.common.UserAttribute.shopping_loyalty:type_name -> google.ads.googleads.v9.common.ShoppingLoyalty
	10, // 8: google.ads.googleads.v9.common.StoreSalesMetadata.third_party_metadata:type_name -> google.ads.googleads.v9.common.StoreSalesThirdPartyMetadata
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v9_common_offline_user_data_proto_init() }
func file_google_ads_googleads_v9_common_offline_user_data_proto_init() {
	if File_google_ads_googleads_v9_common_offline_user_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineUserAddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShoppingLoyalty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerMatchUserListMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSalesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSalesThirdPartyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*UserIdentifier_HashedEmail)(nil),
		(*UserIdentifier_HashedPhoneNumber)(nil),
		(*UserIdentifier_MobileId)(nil),
		(*UserIdentifier_ThirdPartyUserId)(nil),
		(*UserIdentifier_AddressInfo)(nil),
	}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v9_common_offline_user_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v9_common_offline_user_data_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v9_common_offline_user_data_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v9_common_offline_user_data_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v9_common_offline_user_data_proto = out.File
	file_google_ads_googleads_v9_common_offline_user_data_proto_rawDesc = nil
	file_google_ads_googleads_v9_common_offline_user_data_proto_goTypes = nil
	file_google_ads_googleads_v9_common_offline_user_data_proto_depIdxs = nil
}
