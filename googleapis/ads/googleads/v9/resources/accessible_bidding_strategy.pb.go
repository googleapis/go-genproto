// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: google/ads/googleads/v9/resources/accessible_bidding_strategy.proto

package resources

import (
	reflect "reflect"
	sync "sync"

	enums "google.golang.org/genproto/googleapis/ads/googleads/v9/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a view of BiddingStrategies owned by and shared with the customer.
//
// In contrast to BiddingStrategy, this resource includes strategies owned by
// managers of the customer and shared with this customer - in addition to
// strategies owned by this customer. This resource does not provide metrics and
// only exposes a limited subset of the BiddingStrategy attributes.
type AccessibleBiddingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name of the accessible bidding strategy.
	// AccessibleBiddingStrategy resource names have the form:
	//
	// `customers/{customer_id}/accessibleBiddingStrategies/{bidding_strategy_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The ID of the bidding strategy.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The name of the bidding strategy.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The type of the bidding strategy.
	Type enums.BiddingStrategyTypeEnum_BiddingStrategyType `protobuf:"varint,4,opt,name=type,proto3,enum=google.ads.googleads.v9.enums.BiddingStrategyTypeEnum_BiddingStrategyType" json:"type,omitempty"`
	// Output only. The ID of the Customer which owns the bidding strategy.
	OwnerCustomerId int64 `protobuf:"varint,5,opt,name=owner_customer_id,json=ownerCustomerId,proto3" json:"owner_customer_id,omitempty"`
	// Output only. descriptive_name of the Customer which owns the bidding strategy.
	OwnerDescriptiveName string `protobuf:"bytes,6,opt,name=owner_descriptive_name,json=ownerDescriptiveName,proto3" json:"owner_descriptive_name,omitempty"`
	// The bidding scheme.
	//
	// Only one can be set.
	//
	// Types that are assignable to Scheme:
	//	*AccessibleBiddingStrategy_MaximizeConversionValue_
	//	*AccessibleBiddingStrategy_MaximizeConversions_
	//	*AccessibleBiddingStrategy_TargetCpa_
	//	*AccessibleBiddingStrategy_TargetImpressionShare_
	//	*AccessibleBiddingStrategy_TargetRoas_
	//	*AccessibleBiddingStrategy_TargetSpend_
	Scheme isAccessibleBiddingStrategy_Scheme `protobuf_oneof:"scheme"`
}

func (x *AccessibleBiddingStrategy) Reset() {
	*x = AccessibleBiddingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy) ProtoMessage() {}

func (x *AccessibleBiddingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *AccessibleBiddingStrategy) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *AccessibleBiddingStrategy) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccessibleBiddingStrategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessibleBiddingStrategy) GetType() enums.BiddingStrategyTypeEnum_BiddingStrategyType {
	if x != nil {
		return x.Type
	}
	return enums.BiddingStrategyTypeEnum_BiddingStrategyType(0)
}

func (x *AccessibleBiddingStrategy) GetOwnerCustomerId() int64 {
	if x != nil {
		return x.OwnerCustomerId
	}
	return 0
}

func (x *AccessibleBiddingStrategy) GetOwnerDescriptiveName() string {
	if x != nil {
		return x.OwnerDescriptiveName
	}
	return ""
}

func (m *AccessibleBiddingStrategy) GetScheme() isAccessibleBiddingStrategy_Scheme {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (x *AccessibleBiddingStrategy) GetMaximizeConversionValue() *AccessibleBiddingStrategy_MaximizeConversionValue {
	if x, ok := x.GetScheme().(*AccessibleBiddingStrategy_MaximizeConversionValue_); ok {
		return x.MaximizeConversionValue
	}
	return nil
}

func (x *AccessibleBiddingStrategy) GetMaximizeConversions() *AccessibleBiddingStrategy_MaximizeConversions {
	if x, ok := x.GetScheme().(*AccessibleBiddingStrategy_MaximizeConversions_); ok {
		return x.MaximizeConversions
	}
	return nil
}

func (x *AccessibleBiddingStrategy) GetTargetCpa() *AccessibleBiddingStrategy_TargetCpa {
	if x, ok := x.GetScheme().(*AccessibleBiddingStrategy_TargetCpa_); ok {
		return x.TargetCpa
	}
	return nil
}

func (x *AccessibleBiddingStrategy) GetTargetImpressionShare() *AccessibleBiddingStrategy_TargetImpressionShare {
	if x, ok := x.GetScheme().(*AccessibleBiddingStrategy_TargetImpressionShare_); ok {
		return x.TargetImpressionShare
	}
	return nil
}

func (x *AccessibleBiddingStrategy) GetTargetRoas() *AccessibleBiddingStrategy_TargetRoas {
	if x, ok := x.GetScheme().(*AccessibleBiddingStrategy_TargetRoas_); ok {
		return x.TargetRoas
	}
	return nil
}

func (x *AccessibleBiddingStrategy) GetTargetSpend() *AccessibleBiddingStrategy_TargetSpend {
	if x, ok := x.GetScheme().(*AccessibleBiddingStrategy_TargetSpend_); ok {
		return x.TargetSpend
	}
	return nil
}

type isAccessibleBiddingStrategy_Scheme interface {
	isAccessibleBiddingStrategy_Scheme()
}

type AccessibleBiddingStrategy_MaximizeConversionValue_ struct {
	// Output only. An automated bidding strategy to help get the most conversion value for
	// your campaigns while spending your budget.
	MaximizeConversionValue *AccessibleBiddingStrategy_MaximizeConversionValue `protobuf:"bytes,7,opt,name=maximize_conversion_value,json=maximizeConversionValue,proto3,oneof"`
}

type AccessibleBiddingStrategy_MaximizeConversions_ struct {
	// Output only. An automated bidding strategy to help get the most conversions for your
	// campaigns while spending your budget.
	MaximizeConversions *AccessibleBiddingStrategy_MaximizeConversions `protobuf:"bytes,8,opt,name=maximize_conversions,json=maximizeConversions,proto3,oneof"`
}

type AccessibleBiddingStrategy_TargetCpa_ struct {
	// Output only. A bidding strategy that sets bids to help get as many conversions as
	// possible at the target cost-per-acquisition (CPA) you set.
	TargetCpa *AccessibleBiddingStrategy_TargetCpa `protobuf:"bytes,9,opt,name=target_cpa,json=targetCpa,proto3,oneof"`
}

type AccessibleBiddingStrategy_TargetImpressionShare_ struct {
	// Output only. A bidding strategy that automatically optimizes towards a desired
	// percentage of impressions.
	TargetImpressionShare *AccessibleBiddingStrategy_TargetImpressionShare `protobuf:"bytes,10,opt,name=target_impression_share,json=targetImpressionShare,proto3,oneof"`
}

type AccessibleBiddingStrategy_TargetRoas_ struct {
	// Output only. A bidding strategy that helps you maximize revenue while averaging a
	// specific target Return On Ad Spend (ROAS).
	TargetRoas *AccessibleBiddingStrategy_TargetRoas `protobuf:"bytes,11,opt,name=target_roas,json=targetRoas,proto3,oneof"`
}

type AccessibleBiddingStrategy_TargetSpend_ struct {
	// Output only. A bid strategy that sets your bids to help get as many clicks as
	// possible within your budget.
	TargetSpend *AccessibleBiddingStrategy_TargetSpend `protobuf:"bytes,12,opt,name=target_spend,json=targetSpend,proto3,oneof"`
}

func (*AccessibleBiddingStrategy_MaximizeConversionValue_) isAccessibleBiddingStrategy_Scheme() {}

func (*AccessibleBiddingStrategy_MaximizeConversions_) isAccessibleBiddingStrategy_Scheme() {}

func (*AccessibleBiddingStrategy_TargetCpa_) isAccessibleBiddingStrategy_Scheme() {}

func (*AccessibleBiddingStrategy_TargetImpressionShare_) isAccessibleBiddingStrategy_Scheme() {}

func (*AccessibleBiddingStrategy_TargetRoas_) isAccessibleBiddingStrategy_Scheme() {}

func (*AccessibleBiddingStrategy_TargetSpend_) isAccessibleBiddingStrategy_Scheme() {}

// An automated bidding strategy to help get the most conversion value for
// your campaigns while spending your budget.
type AccessibleBiddingStrategy_MaximizeConversionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The target return on ad spend (ROAS) option. If set, the bid strategy
	// will maximize revenue while averaging the target return on ad spend. If
	// the target ROAS is high, the bid strategy may not be able to spend the
	// full budget. If the target ROAS is not set, the bid strategy will aim to
	// achieve the highest possible ROAS for the budget.
	TargetRoas float64 `protobuf:"fixed64,1,opt,name=target_roas,json=targetRoas,proto3" json:"target_roas,omitempty"`
}

func (x *AccessibleBiddingStrategy_MaximizeConversionValue) Reset() {
	*x = AccessibleBiddingStrategy_MaximizeConversionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy_MaximizeConversionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy_MaximizeConversionValue) ProtoMessage() {}

func (x *AccessibleBiddingStrategy_MaximizeConversionValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy_MaximizeConversionValue.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy_MaximizeConversionValue) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AccessibleBiddingStrategy_MaximizeConversionValue) GetTargetRoas() float64 {
	if x != nil {
		return x.TargetRoas
	}
	return 0
}

// An automated bidding strategy to help get the most conversions for your
// campaigns while spending your budget.
type AccessibleBiddingStrategy_MaximizeConversions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The target cost per acquisition (CPA) option. This is the average amount
	// that you would like to spend per acquisition.
	TargetCpa int64 `protobuf:"varint,1,opt,name=target_cpa,json=targetCpa,proto3" json:"target_cpa,omitempty"`
}

func (x *AccessibleBiddingStrategy_MaximizeConversions) Reset() {
	*x = AccessibleBiddingStrategy_MaximizeConversions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy_MaximizeConversions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy_MaximizeConversions) ProtoMessage() {}

func (x *AccessibleBiddingStrategy_MaximizeConversions) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy_MaximizeConversions.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy_MaximizeConversions) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AccessibleBiddingStrategy_MaximizeConversions) GetTargetCpa() int64 {
	if x != nil {
		return x.TargetCpa
	}
	return 0
}

// An automated bidding strategy that helps you maximize revenue while
// averaging a specific target return on ad spend (ROAS).
type AccessibleBiddingStrategy_TargetRoas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The desired revenue (based on conversion data) per unit of spend.
	TargetRoas *float64 `protobuf:"fixed64,1,opt,name=target_roas,json=targetRoas,proto3,oneof" json:"target_roas,omitempty"`
}

func (x *AccessibleBiddingStrategy_TargetRoas) Reset() {
	*x = AccessibleBiddingStrategy_TargetRoas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy_TargetRoas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy_TargetRoas) ProtoMessage() {}

func (x *AccessibleBiddingStrategy_TargetRoas) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy_TargetRoas.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy_TargetRoas) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AccessibleBiddingStrategy_TargetRoas) GetTargetRoas() float64 {
	if x != nil && x.TargetRoas != nil {
		return *x.TargetRoas
	}
	return 0
}

// An automated bid strategy that sets bids to help get as many conversions as
// possible at the target cost-per-acquisition (CPA) you set.
type AccessibleBiddingStrategy_TargetCpa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Average CPA target.
	// This target should be greater than or equal to minimum billable unit
	// based on the currency for the account.
	TargetCpaMicros *int64 `protobuf:"varint,1,opt,name=target_cpa_micros,json=targetCpaMicros,proto3,oneof" json:"target_cpa_micros,omitempty"`
}

func (x *AccessibleBiddingStrategy_TargetCpa) Reset() {
	*x = AccessibleBiddingStrategy_TargetCpa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy_TargetCpa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy_TargetCpa) ProtoMessage() {}

func (x *AccessibleBiddingStrategy_TargetCpa) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy_TargetCpa.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy_TargetCpa) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AccessibleBiddingStrategy_TargetCpa) GetTargetCpaMicros() int64 {
	if x != nil && x.TargetCpaMicros != nil {
		return *x.TargetCpaMicros
	}
	return 0
}

// An automated bidding strategy that sets bids so that a certain percentage
// of search ads are shown at the top of the first page (or other targeted
// location).
type AccessibleBiddingStrategy_TargetImpressionShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The targeted location on the search results page.
	Location enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation `protobuf:"varint,1,opt,name=location,proto3,enum=google.ads.googleads.v9.enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation" json:"location,omitempty"`
	// The desired fraction of ads to be shown in the targeted location in
	// micros. E.g. 1% equals 10,000.
	LocationFractionMicros *int64 `protobuf:"varint,2,opt,name=location_fraction_micros,json=locationFractionMicros,proto3,oneof" json:"location_fraction_micros,omitempty"`
	// Output only. The highest CPC bid the automated bidding system is permitted to specify.
	// This is a required field entered by the advertiser that sets the ceiling
	// and specified in local micros.
	CpcBidCeilingMicros *int64 `protobuf:"varint,3,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
}

func (x *AccessibleBiddingStrategy_TargetImpressionShare) Reset() {
	*x = AccessibleBiddingStrategy_TargetImpressionShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy_TargetImpressionShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy_TargetImpressionShare) ProtoMessage() {}

func (x *AccessibleBiddingStrategy_TargetImpressionShare) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy_TargetImpressionShare.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy_TargetImpressionShare) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AccessibleBiddingStrategy_TargetImpressionShare) GetLocation() enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation {
	if x != nil {
		return x.Location
	}
	return enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation(0)
}

func (x *AccessibleBiddingStrategy_TargetImpressionShare) GetLocationFractionMicros() int64 {
	if x != nil && x.LocationFractionMicros != nil {
		return *x.LocationFractionMicros
	}
	return 0
}

func (x *AccessibleBiddingStrategy_TargetImpressionShare) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

// An automated bid strategy that sets your bids to help get as many clicks
// as possible within your budget.
type AccessibleBiddingStrategy_TargetSpend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The spend target under which to maximize clicks.
	// A TargetSpend bidder will attempt to spend the smaller of this value
	// or the natural throttling spend amount.
	// If not specified, the budget is used as the spend target.
	// This field is deprecated and should no longer be used. See
	// https://ads-developers.googleblog.com/2020/05/reminder-about-sunset-creation-of.html
	// for details.
	//
	// Deprecated: Do not use.
	TargetSpendMicros *int64 `protobuf:"varint,1,opt,name=target_spend_micros,json=targetSpendMicros,proto3,oneof" json:"target_spend_micros,omitempty"`
	// Output only. Maximum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	CpcBidCeilingMicros *int64 `protobuf:"varint,2,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
}

func (x *AccessibleBiddingStrategy_TargetSpend) Reset() {
	*x = AccessibleBiddingStrategy_TargetSpend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessibleBiddingStrategy_TargetSpend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleBiddingStrategy_TargetSpend) ProtoMessage() {}

func (x *AccessibleBiddingStrategy_TargetSpend) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleBiddingStrategy_TargetSpend.ProtoReflect.Descriptor instead.
func (*AccessibleBiddingStrategy_TargetSpend) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP(), []int{0, 5}
}

// Deprecated: Do not use.
func (x *AccessibleBiddingStrategy_TargetSpend) GetTargetSpendMicros() int64 {
	if x != nil && x.TargetSpendMicros != nil {
		return *x.TargetSpendMicros
	}
	return 0
}

func (x *AccessibleBiddingStrategy_TargetSpend) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

var File_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto protoreflect.FileDescriptor

var file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDesc = []byte{
	0x0a, 0x43, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x39, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76,
	0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x39, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x10, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x5f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x34,
	0x0a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x63, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42,
	0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x97, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x70, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x70, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x70, 0x61, 0x12, 0x91, 0x01, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x6f, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x61, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x61, 0x73, 0x12, 0x72, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x1a,
	0x3f, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x61, 0x73,
	0x1a, 0x39, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x70, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x70, 0x61, 0x1a, 0x47, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x6f, 0x61, 0x73, 0x1a, 0x57, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x70,
	0x61, 0x12, 0x34, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x70, 0x61, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x70, 0x61, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x70, 0x61, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x1a, 0xce, 0x02,
	0x0a, 0x15, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x16, 0x63, 0x70, 0x63, 0x5f, 0x62,
	0x69, 0x64, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x13,
	0x63, 0x70, 0x63, 0x42, 0x69, 0x64, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f,
	0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x1a, 0xbb,
	0x01, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3a,
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x05, 0x18, 0x01, 0xe0,
	0x41, 0x03, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x16, 0x63, 0x70,
	0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48,
	0x01, 0x52, 0x13, 0x63, 0x70, 0x63, 0x42, 0x69, 0x64, 0x43, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x70, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x3a, 0x82, 0x01, 0xea,
	0x41, 0x7f, 0x0a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x49, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x69, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x8b, 0x02, 0x0a, 0x25,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x39, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73,
	0x2e, 0x56, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xca, 0x02, 0x21,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x39, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0xea, 0x02, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a,
	0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x39, 0x3a, 0x3a,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescData = file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDesc
)

func file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescData)
	})
	return file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDescData
}

var file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_goTypes = []interface{}{
	(*AccessibleBiddingStrategy)(nil),                                          // 0: google.ads.googleads.v9.resources.AccessibleBiddingStrategy
	(*AccessibleBiddingStrategy_MaximizeConversionValue)(nil),                  // 1: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.MaximizeConversionValue
	(*AccessibleBiddingStrategy_MaximizeConversions)(nil),                      // 2: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.MaximizeConversions
	(*AccessibleBiddingStrategy_TargetRoas)(nil),                               // 3: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetRoas
	(*AccessibleBiddingStrategy_TargetCpa)(nil),                                // 4: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetCpa
	(*AccessibleBiddingStrategy_TargetImpressionShare)(nil),                    // 5: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetImpressionShare
	(*AccessibleBiddingStrategy_TargetSpend)(nil),                              // 6: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetSpend
	(enums.BiddingStrategyTypeEnum_BiddingStrategyType)(0),                     // 7: google.ads.googleads.v9.enums.BiddingStrategyTypeEnum.BiddingStrategyType
	(enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation)(0), // 8: google.ads.googleads.v9.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation
}
var file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_depIdxs = []int32{
	7, // 0: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.type:type_name -> google.ads.googleads.v9.enums.BiddingStrategyTypeEnum.BiddingStrategyType
	1, // 1: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.maximize_conversion_value:type_name -> google.ads.googleads.v9.resources.AccessibleBiddingStrategy.MaximizeConversionValue
	2, // 2: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.maximize_conversions:type_name -> google.ads.googleads.v9.resources.AccessibleBiddingStrategy.MaximizeConversions
	4, // 3: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.target_cpa:type_name -> google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetCpa
	5, // 4: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.target_impression_share:type_name -> google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetImpressionShare
	3, // 5: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.target_roas:type_name -> google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetRoas
	6, // 6: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.target_spend:type_name -> google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetSpend
	8, // 7: google.ads.googleads.v9.resources.AccessibleBiddingStrategy.TargetImpressionShare.location:type_name -> google.ads.googleads.v9.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_init() }
func file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_init() {
	if File_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy_MaximizeConversionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy_MaximizeConversions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy_TargetRoas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy_TargetCpa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy_TargetImpressionShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessibleBiddingStrategy_TargetSpend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AccessibleBiddingStrategy_MaximizeConversionValue_)(nil),
		(*AccessibleBiddingStrategy_MaximizeConversions_)(nil),
		(*AccessibleBiddingStrategy_TargetCpa_)(nil),
		(*AccessibleBiddingStrategy_TargetImpressionShare_)(nil),
		(*AccessibleBiddingStrategy_TargetRoas_)(nil),
		(*AccessibleBiddingStrategy_TargetSpend_)(nil),
	}
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto = out.File
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_rawDesc = nil
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_goTypes = nil
	file_google_ads_googleads_v9_resources_accessible_bidding_strategy_proto_depIdxs = nil
}
